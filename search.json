[{"path":"https://maple-health-group.github.io/easysurv/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 easysurv authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/SECURITY.html","id":"supported-versions","dir":"","previous_headings":"","what":"Supported Versions","title":"Security Policy","text":"project new evolving, currently latest version supported security updates. Please ensure using recent release.","code":""},{"path":"https://maple-health-group.github.io/easysurv/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"Use section tell people report vulnerability. take security software seriously. believe found security vulnerability project, encourage report us soon possible.","code":""},{"path":"https://maple-health-group.github.io/easysurv/SECURITY.html","id":"how-to-report-a-security-vulnerability","dir":"","previous_headings":"Reporting a Vulnerability","what":"How to Report a Security Vulnerability","title":"Security Policy","text":"Please follow steps reporting: Email us github-security@maplehealthgroup.com detailed description vulnerability. Include steps reproduce issue, proof--concept possible. Avoid disclosing vulnerability publicly chance address .","code":""},{"path":"https://maple-health-group.github.io/easysurv/SECURITY.html","id":"response-expectations","dir":"","previous_headings":"Reporting a Vulnerability","what":"Response Expectations","title":"Security Policy","text":"Acknowledgement report within 48 hours. initial assessment within week. keep informed progress toward resolving issue. Public acknowledgment thanks issue resolved. Thank support.","code":""},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Explore easysurv","text":"Welcome easysurv, R package developed Maple Health Group support basic survival analysis. vignette guide basic functionalities package.","code":""},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Explore easysurv","text":"","code":"# First install 'pak' if you haven't already. install.packages(\"pak\")  # Then, install easysurv either from GitHub for the latest version: pak::pkg_install(\"Maple-Health-Group/easysurv\")  # Or from CRAN for the latest stable version: pak::pkg_install(\"easysurv\")"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"loading-the-package","dir":"Articles","previous_headings":"","what":"Loading the package","title":"Explore easysurv","text":"quick_start() creates new .R script, pre-loaded code survival analysis using easy_lung data set. easy_lung formatted copy lung data set survival package. quick_start2() quick_start3() create similar .R scripts based data sets. include easy_bc (“bc” flexsurv package) easy_adtte (“adtte” ggsurvfit package). choice starting data introduces variations code structure function calls.","code":"# Start from a clean environment rm(list = ls())  # Attach the easysurv package library(easysurv)  # (Optional) load an easysurv analysis template quick_start()"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"preparing-your-data","dir":"Articles","previous_headings":"","what":"Preparing your data","title":"Explore easysurv","text":", advise practices ensure easysurv can handle data.","code":""},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"data-import","dir":"Articles","previous_headings":"Preparing your data","what":"Data import","title":"Explore easysurv","text":"easysurv designed work data frames. packages & functions might use import survival data: haven::read_sas() SAS (.sas7bdat) files haven::read_dta() Stata (.dta) files haven::read_sav() SPSS (.sav) files readxl::read_excel() Excel (.xls & .xlsx) files readr::read_csv() .csv files ’re going use easy_adtte example data set. Since ’s data comes loaded easysurv, don’t need functions.","code":"surv_data <- easy_adtte  surv_data #> # A tibble: 2,199 × 19 #>    STUDYID   SUBJID USUBJID   AGE STR01 STR01N STR01L STR02 STR02N STR02L TRT01P #>    <chr>      <dbl> <chr>   <dbl> <chr>  <dbl> <chr>  <chr>  <dbl> <chr>  <chr>  #>  1 PSIVISSI…      1 PSIVIS…    78 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  2 PSIVISSI…      2 PSIVIS…    77 Posi…      1 Hormo… NO P…      2 No pr… table… #>  3 PSIVISSI…      3 PSIVIS…    61 Posi…      1 Hormo… NO P…      2 No pr… table… #>  4 PSIVISSI…      4 PSIVIS…    67 Nega…      2 Hormo… NO P…      2 No pr… table… #>  5 PSIVISSI…      5 PSIVIS…    55 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  6 PSIVISSI…      6 PSIVIS…    70 Nega…      2 Hormo… NO P…      2 No pr… table… #>  7 PSIVISSI…      7 PSIVIS…    54 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  8 PSIVISSI…      8 PSIVIS…    62 Nega…      2 Hormo… PRIO…      1 Prior… table… #>  9 PSIVISSI…      9 PSIVIS…    61 Posi…      1 Hormo… NO P…      2 No pr… table… #> 10 PSIVISSI…     10 PSIVIS…    65 Posi…      1 Hormo… NO P…      2 No pr… visma… #> # ℹ 2,189 more rows #> # ℹ 8 more variables: TRT01PN <dbl>, PARAM <chr>, PARAMCD <chr>, AVAL <dbl>, #> #   CNSR <dbl>, EVNTDESC <chr>, CNSDTDSC <chr>, DCTREAS <chr>"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"data-structure","dir":"Articles","previous_headings":"Preparing your data","what":"Data structure","title":"Explore easysurv","text":"easysurv expects data following structure: column time (time event censoring). mindful event indicator ADTTE data sets named “CNSR” coded opposite way R survival packages expect. Therefore, may need recode event indicator ADTTE data sets. optional column group (stratified analysis). easysurv require use certain column names, although consistency encouraged.","code":"surv_data <- surv_data |>   dplyr::filter(PARAMCD == \"PFS\") |> # Filtering may be relevant for your data   dplyr::mutate(     time = AVAL,     event = 1 - CNSR, # Recode status to 0 = censored, 1 = event     group = TRT01P   ) |>   dplyr::mutate_at(\"group\", as.factor) |> # Convert to factor for easier stratification   dplyr::as_tibble() # Convert to tibble for easier viewing  surv_data #> # A tibble: 2,199 × 22 #>    STUDYID   SUBJID USUBJID   AGE STR01 STR01N STR01L STR02 STR02N STR02L TRT01P #>    <chr>      <dbl> <chr>   <dbl> <chr>  <dbl> <chr>  <chr>  <dbl> <chr>  <chr>  #>  1 PSIVISSI…      1 PSIVIS…    78 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  2 PSIVISSI…      2 PSIVIS…    77 Posi…      1 Hormo… NO P…      2 No pr… table… #>  3 PSIVISSI…      3 PSIVIS…    61 Posi…      1 Hormo… NO P…      2 No pr… table… #>  4 PSIVISSI…      4 PSIVIS…    67 Nega…      2 Hormo… NO P…      2 No pr… table… #>  5 PSIVISSI…      5 PSIVIS…    55 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  6 PSIVISSI…      6 PSIVIS…    70 Nega…      2 Hormo… NO P…      2 No pr… table… #>  7 PSIVISSI…      7 PSIVIS…    54 Posi…      1 Hormo… NO P…      2 No pr… visma… #>  8 PSIVISSI…      8 PSIVIS…    62 Nega…      2 Hormo… PRIO…      1 Prior… table… #>  9 PSIVISSI…      9 PSIVIS…    61 Posi…      1 Hormo… NO P…      2 No pr… table… #> 10 PSIVISSI…     10 PSIVIS…    65 Posi…      1 Hormo… NO P…      2 No pr… visma… #> # ℹ 2,189 more rows #> # ℹ 11 more variables: TRT01PN <dbl>, PARAM <chr>, PARAMCD <chr>, AVAL <dbl>, #> #   CNSR <dbl>, EVNTDESC <chr>, CNSDTDSC <chr>, DCTREAS <chr>, time <dbl>, #> #   event <dbl>, group <fct>"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"data-labelling","dir":"Articles","previous_headings":"Preparing your data","what":"Data labelling","title":"Explore easysurv","text":"easysurv can handle data without labels. However, labelled data easier interpret.","code":"# Check labels impacted by re-coding attr(surv_data$event, \"label\") #> [1] \"Censoring flag (0 = Event, 1 = censored)\" # Check levels of the group factor variable levels(surv_data$group) #> [1] \"tablemab + vismab 52 weeks\"            #> [2] \"tablemab x 12 week -> vismab 34 weeks\" #> [3] \"tablemab x 52 weeks\"                   #> [4] \"vismab x 52 weeks\" # Overwrite the attributes with new labels attr(surv_data$event, \"label\") <- \"0 = Censored, 1 = Event\" levels(surv_data$group) <- c(\"Tab+Vis\", \"Tab->Vis\", \"Tab\", \"Vis\")"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Exploratory data analysis","title":"Explore easysurv","text":"easysurv provides simple function, inspect_surv_data(), help explore data. , can see first rows data, number events censored observations, sample sizes, median survival estimates. helps us understand structure data identify potential issues.","code":"inspect_surv_data(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" ) #>  #> ── Inspect Survival Data ─────────────────────────────────────────────────────── #>  #> ── First Few Rows ── #>  #> # A tibble: 6 × 22 #>   STUDYID       SUBJID USUBJID           AGE STR01    STR01N #>   <chr>          <dbl> <chr>           <dbl> <chr>     <dbl> #> 1 PSIVISSIG0002      1 PSIVISSIG0002_1    78 Positive      1 #> 2 PSIVISSIG0002      2 PSIVISSIG0002_2    77 Positive      1 #> 3 PSIVISSIG0002      3 PSIVISSIG0002_3    61 Positive      1 #> 4 PSIVISSIG0002      4 PSIVISSIG0002_4    67 Negative      2 #> 5 PSIVISSIG0002      5 PSIVISSIG0002_5    55 Positive      1 #> 6 PSIVISSIG0002      6 PSIVISSIG0002_6    70 Negative      2 #>   STR01L                    STR02        STR02N STR02L                #>   <chr>                     <chr>         <dbl> <chr>                 #> 1 Hormone receptor positive NO PRIOR USE      2 No prior radiotherapy #> 2 Hormone receptor positive NO PRIOR USE      2 No prior radiotherapy #> 3 Hormone receptor positive NO PRIOR USE      2 No prior radiotherapy #> 4 Hormone receptor negative NO PRIOR USE      2 No prior radiotherapy #> 5 Hormone receptor positive NO PRIOR USE      2 No prior radiotherapy #> 6 Hormone receptor negative NO PRIOR USE      2 No prior radiotherapy #>   TRT01P                                TRT01PN #>   <chr>                                   <dbl> #> 1 vismab x 52 weeks                           2 #> 2 tablemab x 12 week -> vismab 34 weeks       3 #> 3 tablemab + vismab 52 weeks                  4 #> 4 tablemab x 52 weeks                         1 #> 5 vismab x 52 weeks                           2 #> 6 tablemab x 52 weeks                         1 #>   PARAM                             PARAMCD   AVAL  CNSR #>   <chr>                             <chr>    <dbl> <dbl> #> 1 Progression-free survival (years) PFS     0.824      0 #> 2 Progression-free survival (years) PFS     3.03       1 #> 3 Progression-free survival (years) PFS     2.32       0 #> 4 Progression-free survival (years) PFS     1.11       1 #> 5 Progression-free survival (years) PFS     2.00       1 #> 6 Progression-free survival (years) PFS     0.0931     1 #>   EVNTDESC                           CNSDTDSC                          #>   <chr>                              <chr>                             #> 1 Death                              NA                                #> 2 Ongoing on first next-line therapy Censored at the last contact date #> 3 Death                              NA                                #> 4 Ongoing on first next-line therapy Censored at the last contact date #> 5 Ongoing on first next-line therapy Censored at the last contact date #> 6 No next-line therapy initiated     Censored at the last contact date #>   DCTREAS               time event group    #>   <chr>                <dbl> <dbl> <fct>    #> 1 PROGRESSIVE DISEASE 0.824      1 Vis      #> 2 PROGRESSIVE DISEASE 3.03       0 Tab->Vis #> 3 PROGRESSIVE DISEASE 2.32       1 Tab+Vis  #> 4 PROGRESSIVE DISEASE 1.11       0 Tab      #> 5 PROGRESSIVE DISEASE 2.00       0 Vis      #> 6 PROGRESSIVE DISEASE 0.0931     0 Tab #> ── Sample Sizes ── #> # A tibble: 4 × 2 #>   group        n #>   <fct>    <int> #> 1 Tab+Vis    536 #> 2 Tab->Vis   557 #> 3 Tab        551 #> 4 Vis        555 #> ── Events Summary ── #> # A tibble: 8 × 4 #>   group    event     n percent #>   <fct>    <dbl> <int>   <dbl> #> 1 Tab+Vis      0   383   0.715 #> 2 Tab+Vis      1   153   0.285 #> 3 Tab->Vis     0   375   0.673 #> 4 Tab->Vis     1   182   0.327 #> 5 Tab          0   331   0.601 #> 6 Tab          1   220   0.399 #> 7 Vis          0   355   0.640 #> 8 Vis          1   200   0.360 #> ── Survival Summary ── #> # A tibble: 4 × 9 #>   records n.max n.start events rmean `se(rmean)` median `0.95LCL` `0.95UCL` #>     <dbl> <dbl>   <dbl>  <dbl> <dbl>       <dbl>  <dbl>     <dbl>     <dbl> #> 1     536   536     536    153  3.55       0.103   3.81      3.25      4.05 #> 2     557   557     557    182  3.37       0.101   3.56      3.09      3.89 #> 3     551   551     551    220  2.97       0.102   2.76      2.23      3.17 #> 4     555   555     555    200  3.10       0.105   3.09      2.73      3.56"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"kaplan-meier-survival-curves","dir":"Articles","previous_headings":"","what":"Kaplan-Meier survival curves","title":"Explore easysurv","text":"Kaplan-Meier (KM) estimator non-parametric method used estimate survival function time--event data. easysurv provides simple function, get_km(), generate KM curves alongside summary.  function uses easysurv’s plot_km() generate KM curves. can also use plot_km() directly, pass additional arguments get_km(), customize plot. example, default, shapes used place group names risk table beneath plot save space. can change setting risktable_symbols = FALSE.","code":"km <- get_km(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" )  km #> ── Kaplan-Meier Data ─────────────────────────────────────────────────────────── #> The get_km function has produced the following outputs: #> • km: A `survival::survfit()` object for Kaplan-Meier estimates. #> • km_for_excel: A list of stepped Kaplan-Meier data for external plotting. #> • km_per_group: A list of Kaplan-Meier estimates for each group. #> • km_plot: A Kaplan-Meier plot. #> • km_summary: A summary table of the Kaplan-Meier estimates. #>  #> ── km Summary ── #>  #>             group records events    rmean se(rmean)   median  0.95LCL  0.95UCL #> Tab+Vis   Tab+Vis     536    153 3.554736 0.1032077 3.811088 3.249829 4.049281 #> Tab->Vis Tab->Vis     557    182 3.374254 0.1008296 3.561944 3.093771 3.890486 #> Tab           Tab     551    220 2.972657 0.1019493 2.757016 2.225873 3.173169 #> Vis           Vis     555    200 3.101311 0.1054645 3.093771 2.726899 3.556468 #>          Median follow-up #> Tab+Vis          2.217659 #> Tab->Vis         2.220397 #> Tab              2.308008 #> Vis              2.198494 #> \"km_plot\" has been printed. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `get_km()` output. km_with_names <- get_km(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\",   risktable_symbols = FALSE )  km_with_names$km_plot"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"testing-proportional-hazards","dir":"Articles","previous_headings":"","what":"Testing proportional hazards","title":"Explore easysurv","text":"Cox proportional hazards model popular method estimating effect covariates survival time. model assumes hazard ratio given covariate constant time. easysurv provides simple function, test_ph() support testing proportional hazards assumption. output reports hazard ratios groups, 95% confidence intervals, p-values test survival differences proportional hazards. example, survival::cox.zph() found global p-value 0.021, suggesting proportional hazards assumption violated (p < 0.05). supported Schoenfeld residual plot, shows clear pattern non-proportionality; log cumulative hazard plot lines parallel. However, always clear cut, reminder printed results interpreted totality caution.","code":"ph <- test_ph(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" )  ph #>  #> ── Testing Survival Curve Differences ────────────────────────────────────────── #> ℹ `survival::survdiff()` found a p-value of 0. #> ✔ suggests survival differences between groups are statistically significant. #>  #> ── Testing Proportional Hazards Assumption ───────────────────────────────────── #>  #> ── Cox Proportional Hazards Model ── #>  #> `survival::coxph()` output: #>  #>                    coef exp(coef)  se(coef)        z     Pr(>|z|) #> groupTab->Vis 0.1830613  1.200888 0.1096992 1.668758 9.516544e-02 #> groupTab      0.5033557  1.654263 0.1053908 4.776089 1.787369e-06 #> groupVis      0.4046802  1.498823 0.1074969 3.764574 1.668336e-04 #>  #> The exp(coef) column shows the hazard ratios were 1.201, 1.654, and 1.499. #>  #> ℹ `survival::cox.zph()` found a p-value of 0.021. #> ! suggests the PH assumption may not be valid. #>  #> ── Plots ── #>  #> ℹ Schoenfeld residuals and log cumulative hazard plots have been printed. #> ℹ PH tests may not always agree, so consider the results of all tests and plots in totality. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `test_ph()` output."},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"fitting-survival-models","dir":"Articles","previous_headings":"","what":"Fitting survival models","title":"Explore easysurv","text":"easysurv provides simple function, fit_models() fit survival models. function can fit multiple distributions , returns summary distributions attempted.","code":""},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"aside-handling-failure","dir":"Articles","previous_headings":"Fitting survival models","what":"Aside: handling failure","title":"Explore easysurv","text":"hood, easysurv builds upon parsnip package. fit_models(), make key update approach handle errors model fitting process. purrr::possibly() leveraged help code run smoothly even model fitting process fails. particularly useful testing multiple distributions, best distribution known priori. returned object, track distributions attempted, successful, failed. failures highlighted fit_models object printed.","code":"# We created a function to return NULL if issues arise in model fitting. pfit <- purrr::possibly(.f = parsnip::fit)  # Without easysurv, here's how parsnip might be used to fit models: parsnip::survival_reg(dist = \"weibull\") |>   parsnip::set_engine(\"flexsurv\") |>   parsnip::fit(     formula = survival::Surv(time, event) ~ group,     data = surv_data   )  # But, in easysurv, the fit_models() function uses pfit() to handle errors. # This looks a bit like: parsnip::survival_reg(dist = \"weibull\") |>   parsnip::set_engine(\"flexsurv\") |>   pfit(     formula = survival::Surv(time, event) ~ group,     data = surv_data   ) # Take just two rows of data and expect distributions to fail. lacking <- surv_data[3:4, ]  suspected_failure <- fit_models(   data = lacking,   time = \"time\",   event = \"event\",   dists = c(\"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", \"lnorm\", \"weibull\") ) #> ! Failed distributions: \"lnorm\" and \"weibull\". print(suspected_failure) #>  #> ── Fit Models Summary ────────────────────────────────────────────────────────── #> Engine: flexsurv. #> Approach: predict_by_none. #> • The predict_by argument was not specified. #> • Therefore, models were fit on the full dataset. #>  #> Distributions attempted: \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", #> \"lnorm\", and \"weibull\". #>  #> ── Median survival estimates ── #>  #> ! Some distributions failed to converge. #> Failed distributions: \"lnorm\" and \"weibull\" #>       dist aic_rank median_est #> 1      exp        5   2.375962 #> 2    gamma        3   2.316222 #> 3 gengamma        2   2.316587 #> 4 gompertz        4   2.292949 #> 5   llogis        1   2.316222 #> ℹ For comparison, the KM median survival times were 2.316. #> ℹ The distribution with the best (lowest) AIC was \"llogis\". #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `fit_models()` output."},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"fitting-models-separately","dir":"Articles","previous_headings":"Fitting survival models","what":"Fitting models separately","title":"Explore easysurv","text":"default, fit_models() fits exponential, gamma, generalized gamma, Gompertz, log-logistic, log-normal, Weibull distributions using flexsurv engine. predict_by argument allows stratify analysis factor variable. useful comparing survival curves groups.","code":"models <- fit_models(   data = surv_data,   time = \"time\",   event = \"event\",   predict_by = \"group\" )  models #>  #> ── Fit Models Summary ────────────────────────────────────────────────────────── #> Engine: flexsurv. #> Approach: predict_by_other. #> • The predict_by argument was set to \"group\", which was not a covariate. #> • Therefore, models were fit for each level of \"group\". #> • This is sometimes referred to as \"separate fits\". #>  #> Distributions attempted: \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", #> \"lnorm\", and \"weibull\". #>  #> ── Median survival estimates ── #>  #> ── Group: \"Tab+Vis\" #>       dist aic_rank median_est #> 1      exp        7   4.808931 #> 2    gamma        4   3.551551 #> 3 gengamma        2   3.606839 #> 4 gompertz        6   3.704355 #> 5   llogis        3   3.529768 #> 6    lnorm        1   3.640024 #> 7  weibull        5   3.582751 #> ℹ For comparison, the KM median survival time was 3.811. #> ℹ The distribution with the best (lowest) AIC was \"lnorm\". #>  #> ── Group: \"Tab->Vis\" #>       dist aic_rank median_est #> 1      exp        7   4.050024 #> 2    gamma        2   3.323607 #> 3 gengamma        3   3.340974 #> 4 gompertz        6   3.475535 #> 5   llogis        1   3.289348 #> 6    lnorm        5   3.453536 #> 7  weibull        4   3.344948 #> ℹ For comparison, the KM median survival time was 3.562. #> ℹ The distribution with the best (lowest) AIC was \"llogis\". #>  #> ── Group: \"Tab\" #>       dist aic_rank median_est #> 1      exp        7   3.042705 #> 2    gamma        4   2.696690 #> 3 gengamma        2   2.684589 #> 4 gompertz        6   2.869834 #> 5   llogis        3   2.642277 #> 6    lnorm        1   2.681792 #> 7  weibull        5   2.743302 #> ℹ For comparison, the KM median survival time was 2.757. #> ℹ The distribution with the best (lowest) AIC was \"lnorm\". #>  #> ── Group: \"Vis\" #>       dist aic_rank median_est #> 1      exp        7   3.357186 #> 2    gamma        4   2.896536 #> 3 gengamma        2   2.930034 #> 4 gompertz        6   3.062430 #> 5   llogis        3   2.864902 #> 6    lnorm        1   2.918391 #> 7  weibull        5   2.934549 #> ℹ For comparison, the KM median survival time was 3.094. #> ℹ The distribution with the best (lowest) AIC was \"lnorm\". #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `fit_models()` output."},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"fitting-models-jointly","dir":"Articles","previous_headings":"Fitting survival models","what":"Fitting models jointly","title":"Explore easysurv","text":"Alternatively, can fit models “jointly” specifying treatment group covariate, also setting predict_by treatment group. may appropriate given outcomes proportional hazard tests , shown completeness.","code":"joint_models <- fit_models(   data = surv_data,   time = \"time\",   event = \"event\",   predict_by = \"group\",   covariates = \"group\" )  joint_models #>  #> ── Fit Models Summary ────────────────────────────────────────────────────────── #> Engine: flexsurv. #> Approach: predict_by_covariate. #> • The predict_by argument was set to \"group\", which was also a covariate. #> • Therefore, models were fit on the full dataset. #> • This is sometimes referred to as \"joint fits\". #>  #> Distributions attempted: \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", #> \"lnorm\", and \"weibull\". #>  #> ── Median survival estimates ── #>  #>       dist aic_rank group=Tab+Vis group=Tab->Vis group=Tab group=Vis #> 1      exp        7      4.808931       4.050024  3.042705  3.357186 #> 2    gamma        4      3.744443       3.312688  2.679957  2.847226 #> 3 gengamma        1      3.899873       3.341921  2.669066  2.825529 #> 4 gompertz        6      3.816103       3.473659  2.863736  3.042851 #> 5   llogis        3      3.753334       3.280103  2.622823  2.791301 #> 6    lnorm        2      3.968814       3.359080  2.681873  2.832604 #> 7  weibull        5      3.735166       3.347753  2.732276  2.905239 #> ℹ For comparison, the KM median survival times were 3.811, 3.562, 2.757, and 3.094. #> ℹ The distribution with the best (lowest) AIC was \"gengamma\". #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `fit_models()` output."},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"fitting-spline-models","dir":"Articles","previous_headings":"Fitting survival models","what":"Fitting spline models","title":"Explore easysurv","text":"easysurv also supports fitting spline models via flexsurvspline engine. useful relationship time hazard linear. code fits spline models 1, 2, 3 knots hazard scale.","code":"spline_models <- fit_models(   data = surv_data,   time = \"time\",   event = \"event\",   predict_by = \"group\",   engine = \"flexsurvspline\",   k = c(1, 2, 3),   scale = \"hazard\" )"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"fitting-cure-models","dir":"Articles","previous_headings":"Fitting survival models","what":"Fitting cure models","title":"Explore easysurv","text":"easysurv also supports fitting mixture cure models via flexsurvcure engine. may useful proportion population assumed cured therefore much less likely experience event interest. code example syntax. output cure models also includes estimated cure fractions.","code":"cure_models <- fit_models(   data = surv_data,   time = \"time\",   event = \"event\",   predict_by = \"group\",   engine = \"flexsurvcure\" )"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"making-predictions-and-plots","dir":"Articles","previous_headings":"","what":"Making predictions and plots","title":"Explore easysurv","text":"fit_models() object, can use predict_and_plot() generate predictions plots may help choose models. predict_and_plot() function generates survival hazard plots model, stratified predict_by variable original fit_models() call (predict_by provided). don’t provide times argument, function predict 5 times maximum observed time data, 100 equally distributed time points, often sufficient.","code":"# With the \"models\" object from above... preds_and_plots <- predict_and_plot(models)  preds_and_plots #> ℹ Survival plots have been printed. #> ℹ Hazard plots have been printed."},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"exporting-your-results","dir":"Articles","previous_headings":"","what":"Exporting your results","title":"Explore easysurv","text":"easysurv provides simple function, write_to_xl() export results .xlsx file, using openxlsx package. function can take outputs get_km(), test_ph(), fit_models(), predict_and_plot(). example, can export outputs code chunks Excel file following code: Note: multiple fit_models predict_and_plot objects, save workbooks, since write_to_xl() may choose sheet names overwrite data models.","code":"# Create workbook wb <- openxlsx::createWorkbook()  # Write easysurv objects to the workbook write_to_xl(wb, km) write_to_xl(wb, ph) write_to_xl(wb, models) write_to_xl(wb, preds_and_plots)  # Save and open the workbook openxlsx::saveWorkbook(wb, file = \"my_file_name.xlsx\", overwrite = TRUE) openxlsx::openXL(\"my_file_name.xlsx\")"},{"path":"https://maple-health-group.github.io/easysurv/articles/easysurv.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Explore easysurv","text":", set standard parametric model outputs R Excel! hope enjoy using package!","code":""},{"path":"https://maple-health-group.github.io/easysurv/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Niall Davison. Author, maintainer. Brad Kievit. Author. Maple Health Group, LLC. Copyright holder, funder.","code":""},{"path":"https://maple-health-group.github.io/easysurv/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davison N, Kievit B (2024). easysurv: Simplify Survival Data Analysis Model Fitting. R package version 2.0.1.9000,  https://maple-health-group.github.io/easysurv/, https://github.com/Maple-Health-Group/easysurv.","code":"@Manual{,   title = {easysurv: Simplify Survival Data Analysis and Model Fitting},   author = {Niall Davison and Brad Kievit},   year = {2024},   note = {R package version 2.0.1.9000,  https://maple-health-group.github.io/easysurv/},   url = {https://github.com/Maple-Health-Group/easysurv}, }"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"easysurv-","dir":"","previous_headings":"","what":"Simplify Survival Data Analysis and Model Fitting","title":"Simplify Survival Data Analysis and Model Fitting","text":"easysurv R package provides tools simplify survival data analysis model fitting. includes tools inspect survival data, plot Kaplan-Meier curves, assess proportional hazards assumption, fit parametric survival models, predict plot survival hazards, export outputs Excel. fitting survival models, package provides simple interface flexsurv::flexsurvreg(), flexsurv::flexsurvspline(), flexsurvcure::flexsurvcure(), survival::survreg(). default, package uses flexsurv engine (flexsurv::flexsurvreg()) provides helpful starting point explore survival extrapolations across frequently used distributions (exponential, generalized gamma, gamma, Gompertz, log-logistic, log-normal Weibull).","code":""},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simplify Survival Data Analysis and Model Fitting","text":"haven’t already, install R consider using RStudio integrated development environment (IDE).","code":"# You will need to have the pak package installed. install.packages(\"pak\")  # Then, install easysurv either from GitHub for the latest version: pak::pkg_install(\"Maple-Health-Group/easysurv\")  # Or from CRAN for the latest stable version: pak::pkg_install(\"easysurv\")"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"# Attach the easysurv library library(easysurv)  # Open an example script quick_start() ## Note: The default file name is \"easysurv_start.R\", but you can define your own, e.g. ## quick_start(\"my_file_name.R\")  # Access help files help(package = \"easysurv\")"},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"start-by-tidying-your-data","dir":"","previous_headings":"Examples","what":"Start by tidying your data…","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"# Load the easy_lung data from the easysurv package # Recode the \"status\" variable to create an event indicator (0/1) surv_data <- easy_lung |>   dplyr::mutate(     time = time,     event = status - 1,     group = sex,     .after = time   ) |>   dplyr::select(-c(inst, ph.karno, pat.karno)) # remove some unused columns  # Make the group variable a factor and assign level labels. surv_data <- surv_data |>   dplyr::mutate_at(\"group\", as.factor) levels(surv_data$group) <- c(\"Male\", \"Female\")"},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"inspect_surv_data","dir":"","previous_headings":"Examples","what":"inspect_surv_data()","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"inspect_surv_data(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" )"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"get_km","dir":"","previous_headings":"Examples","what":"get_km()","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"km_check <- get_km(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" )  print(km_check)"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"test_ph","dir":"","previous_headings":"Examples","what":"test_ph()","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"ph_check <- test_ph(   data = surv_data,   time = \"time\",   event = \"event\",   group = \"group\" )  print(ph_check)"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"fit_models","dir":"","previous_headings":"Examples","what":"fit_models()","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"separate_models <- fit_models(   data = surv_data,   time = \"time\",   event = \"event\",   predict_by = \"group\" )  print(separate_models)"},{"path":"https://maple-health-group.github.io/easysurv/index.html","id":"predict_and_plot","dir":"","previous_headings":"Examples","what":"predict_and_plot()","title":"Simplify Survival Data Analysis and Model Fitting","text":"","code":"plots <- predict_and_plot(fit_models = separate_models)  print(plots)"},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_adtte.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Copy of ggsurvfit::adtte — easy_adtte","title":"Formatted Copy of ggsurvfit::adtte — easy_adtte","text":"Background example simulated data set based large phase III clinical trials breast cancer ALTTO trial doi:10.1200/JCO.2015.62.1797 . example trial aims determine combination two therapies tablemab (T) plus vismab (V) improves outcomes metastatic human epidermal growth factor 2-positive breast cancer increases pathologic complete response neoadjuvant setting (.e. treatment given first step shrink tumor main treatment surgery). trial four treatment arms, patients centrally confirmed human epidermal growth factor 2-positive early breast cancer randomly assigned 1 year adjuvant therapy V, T, sequence (T V), combination (T+V) 52 weeks. primary end point progression-free survival (PFS) defined Cancer.gov: '\"length time treatment disease, cancer, patient lives disease get worse. clinical trial, measuring progression-free survival one way see well new treatment works\"'. number baseline measurements (taken randomization) also included age, hormone receptor status prior radiotherapy treatment. Additional details reasons study discontinuation censoring event description also included. data set adopts abridged version CDISC ADaM ADTTE time event data model. See info CDISC ADaM data standards https://www.cdisc.org/standards/foundational/adam specifically ADTTE time event data model https://www.cdisc.org/standards/foundational/adam/adam-basic-data-structure-bds-time-event-tte-analyses-v1-0.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_adtte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Copy of ggsurvfit::adtte — easy_adtte","text":"","code":"easy_adtte"},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_adtte.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Formatted Copy of ggsurvfit::adtte — easy_adtte","text":"data set contains following variables: STUDYID study identifier. code unique clinical trial SUBJID subject identifier. Numeric ID unique patient USUBJID unique subject identifier. Text ID combining study patient IDs AGE age randomisation (years) STR01 Hormone receptor status randomisation STR01N Hormone receptor positive (Numeric) STR01L Hormone receptor positive (Long format) STR02 Prior Radiotherapy randomisation STR02N Prior Radiotherapy randomisation (Numeric) STR02L Prior Radiotherapy randomisation (Long format) TRT01P Planned treatment assigned randomisation TRT01PN Planned treatment assigned randomisation (Numeric) PARAM Analysis parameter: Progression free survival PARAMCD Analysis parameter code AVAL Analysis value (time event (years) CNSR Censoring (0 = Event, 1 = Censored) EVNTDESC Event description CNSDTDSC Censoring description DCTREAS Discontinuation study reason","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_adtte.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Formatted Copy of ggsurvfit::adtte — easy_adtte","text":"ggsurvfit::adtte","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Copy of flexsurv::bc — easy_bc","title":"Formatted Copy of flexsurv::bc — easy_bc","text":"copy bc data set exported flexsurv package. data set, however, column labels assigned.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Copy of flexsurv::bc — easy_bc","text":"","code":"easy_bc"},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_bc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Formatted Copy of flexsurv::bc — easy_bc","text":"data set contains following variables: censrec 0 = Censored, 1 = Dead rectime Time censoring death days group Prognostic group: Good, Medium, Poor recyrs Time censoring death years","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_bc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Formatted Copy of flexsurv::bc — easy_bc","text":"flexsurv::bc","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_lung.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Copy of survival::lung — easy_lung","title":"Formatted Copy of survival::lung — easy_lung","text":"copy lung data set exported survival package. data set, however, column labels assigned time months.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_lung.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Copy of survival::lung — easy_lung","text":"","code":"easy_lung"},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_lung.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Formatted Copy of survival::lung — easy_lung","text":"data set contains following variables: inst Institution code time Survival time, months status Censoring status, 1 = censored, 2 = dead age Age sex Sex, 1 = Male, 2 = Female ph.ecog ECOG Performance Status (Physician) ph.karno Karnofsky performance score (Physician) pat.karno Karnofsky performance score (Patient) meal.cal Calories consumed wt.loss Weight loss, lbs","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easy_lung.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Formatted Copy of survival::lung — easy_lung","text":"survival::lung","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/easysurv-package.html","id":null,"dir":"Reference","previous_headings":"","what":"easysurv: Simplify Survival Data Analysis and Model Fitting — easysurv-package","title":"easysurv: Simplify Survival Data Analysis and Model Fitting — easysurv-package","text":"Inspect survival data, plot Kaplan-Meier curves, assess proportional hazards assumption, fit parametric survival models, predict plot survival hazards, export outputs Excel. simple interface fitting survival models using 'flexsurv::flexsurvreg()', 'flexsurv::flexsurvspline()', 'flexsurvcure::flexsurvcure()', 'survival::survreg()'.","code":""},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/reference/easysurv-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"easysurv: Simplify Survival Data Analysis and Model Fitting — easysurv-package","text":"Maintainer: Niall Davison niall.davison@maplehealthgroup.com (ORCID) Authors: Brad Kievit brad.kievit@maplehealthgroup.com contributors: Maple Health Group, LLC [copyright holder, funder]","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/fit_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Survival Models — fit_models","title":"Fit Survival Models — fit_models","text":"Fits survival models provided data using specified engine returns various outputs including model parameters, goodness fit, estimates median survival.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/fit_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Survival Models — fit_models","text":"","code":"fit_models(   data,   time,   event,   predict_by = NULL,   covariates = NULL,   dists = c(\"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", \"lnorm\", \"weibull\"),   engine = \"flexsurv\",   k = c(1, 2, 3),   scale = \"hazard\",   add_time_0 = TRUE,   ... )"},{"path":"https://maple-health-group.github.io/easysurv/reference/fit_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Survival Models — fit_models","text":"data data frame containing survival data. time name column data containing time--event information. event name column data indicating whether event interest occurred. predict_by (Optional) name column data defining prediction variable. covariates (Optional) character vector specifying names covariates included model. dists (Optional) character vector specifying distribution(s) fitted. engine parameter set \"flexsurv\", options \"exp\", \"exponential\", \"gamma\", \"genf\", \"genf.orig\", \"gengamma\", \"gengamma.orig\", \"gompertz\", \"llogis\", \"lnorm\", \"lognormal\", \"weibull\", \"weibullPH\". engine parameter set \"flexsurvcure\", options \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", \"lnorm\", \"weibull\". engine parameter set \"flexsurvspline\", dists ignored favor k scale parameters. engine parameter set \"survival\", options \"exponential\", \"extreme\", \"gaussian\", \"loggaussian\" (lognormal), \"logistic\", \"lognormal\", \"rayleigh\", \"weibull\". Default c(\"exp\", \"gamma\", \"gengamma\", \"gompertz\",   \"llogis\", \"lnorm\", \"weibull\") applies flexsurv-related engines. engine (Optional) survival analysis engine used. Options \"flexsurv\", \"flexsurvcure\", \"flexsurvspline\", \"survival\". Default \"flexsurv\". \"flexsurv\" uses flexsurv::flexsurvreg(). \"flexsurvspline\" uses flexsurv::flexsurvspline(). \"flexsurvcure\" uses flexsurvcure::flexsurvcure(). \"survival\" uses survival::survreg(). k (Optional) numeric vector specifying number knots spline-based models. Default c(1, 2, 3) test different numbers. scale (Optional) character vector specifying scale parameter(s) spline-based models. Options \"hazard\", \"odds\", \"normal\". Default \"hazard\". add_time_0 Optional. Uses survival::survfit0() add starting time 0 KM survfit object. may useful plotting KM subsequent stage (surv_plots). Default TRUE. ... Additional arguments just catch avoid errors.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/fit_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Survival Models — fit_models","text":"list containing information fit_models() call, distributions attempted, goodness fit, fit averages, cure fractions (applicable).","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/fit_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Survival Models — fit_models","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\",   covariates = \"group\" )  models #>  #> ── Fit Models Summary ────────────────────────────────────────────────────────── #> Engine: flexsurv. #> Approach: predict_by_covariate. #> • The predict_by argument was set to \"group\", which was also a covariate. #> • Therefore, models were fit on the full dataset. #> • This is sometimes referred to as \"joint fits\". #>  #> Distributions attempted: \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", #> \"lnorm\", and \"weibull\". #>  #> ── Median survival estimates ── #>  #>       dist aic_rank group=Good group=Medium group=Poor #> 1      exp        7  11.479024     5.065736   2.466988 #> 2    gamma        4   8.511336     4.663958   2.538296 #> 3 gengamma        1   8.630495     4.507538   2.392662 #> 4 gompertz        6   8.530095     4.865718   2.606950 #> 5   llogis        3   8.474213     4.545136   2.336817 #> 6    lnorm        2   8.632037     4.558062   2.393145 #> 7  weibull        5   8.757940     4.741585   2.605819 #>  #> ℹ For comparison, the KM median survival times were NA, 5.255, and 2.184. #> ℹ The distribution with the best (lowest) AIC was \"gengamma\". #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `fit_models()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/get_KM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Kaplan-Meier estimates — get_km","title":"Generate Kaplan-Meier estimates — get_km","text":"Calculates Kaplan-Meier estimates survival data returns summary statistics, plots, additional outputs.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_KM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Kaplan-Meier estimates — get_km","text":"","code":"get_km(   data,   time,   event,   group = NULL,   group_labels = NULL,   just_km = FALSE,   ... )"},{"path":"https://maple-health-group.github.io/easysurv/reference/get_KM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Kaplan-Meier estimates — get_km","text":"data data frame containing survival data. time name column data containing time--event information. event name column data indicating whether event interest occurred. group (Optional) name column data defining grouping variable. Default NULL. group_labels Optional character vector containing names strata (default NULL). Provide consistent order levels(.factor(data$group)). just_km Logical. TRUE, Kaplan-Meier estimates returned. Default FALSE. ... (Optional) Parameters pass ggsurvfit.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_KM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Kaplan-Meier estimates — get_km","text":"list containing Kaplan-Meier estimates, summary statistics, plots.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_KM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Kaplan-Meier estimates — get_km","text":"","code":"km_results <- get_km(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\",   risktable_symbols = FALSE )  km_results #>  #> ── Kaplan-Meier Data ─────────────────────────────────────────────────────────── #> The get_km function has produced the following outputs: #> • km: A `survival::survfit()` object for Kaplan-Meier estimates. #> • km_for_excel: A list of stepped Kaplan-Meier data for external plotting. #> • km_per_group: A list of Kaplan-Meier estimates for each group. #> • km_plot: A Kaplan-Meier plot. #> • km_summary: A summary table of the Kaplan-Meier estimates. #>  #> ── km Summary ── #>  #>         group records events    rmean se(rmean)   median  0.95LCL  0.95UCL #> Good     Good     229     51 5.934330 0.1616003       NA       NA       NA #> Medium Medium     229    103 4.600852 0.1856699 5.254795 4.115068 5.572603 #> Poor     Poor     228    145 3.101736 0.1772520 2.183562 1.978082 2.619178 #>        Median follow-up #> Good           4.452055 #> Medium         4.712329 #> Poor           4.115068 #>  #> \"km_plot\" has been printed. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `get_km()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/get_schoenfeld.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Schoenfeld Residuals — get_schoenfeld","title":"Extract Schoenfeld Residuals — get_schoenfeld","text":"function extracts Schoenfeld residuals fitted cox.zph object formats tidy data frame.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_schoenfeld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Schoenfeld Residuals — get_schoenfeld","text":"","code":"get_schoenfeld(fit_zph)"},{"path":"https://maple-health-group.github.io/easysurv/reference/get_schoenfeld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Schoenfeld Residuals — get_schoenfeld","text":"fit_zph object class cox.zph produced cox.zph function, representing Schoenfeld residuals Cox proportional hazards model.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_schoenfeld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Schoenfeld Residuals — get_schoenfeld","text":"tibble Schoenfeld residuals long format, containing columns: time time variable Cox model. transform transformation applied time variable. variable variable names Cox model residuals calculated. residual Schoenfeld residuals variable time point.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/get_schoenfeld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Schoenfeld Residuals — get_schoenfeld","text":"","code":"library(survival) test_fit <- survival::coxph(survival::Surv(time, status) ~ sex, data = lung) test_fit_zph <- survival::cox.zph(test_fit) get_schoenfeld(test_fit_zph) #> # A tibble: 165 × 4 #>       time transform variable residual #>      <dbl> <chr>     <chr>       <dbl> #>  1 0       km        sex          2.80 #>  2 0.00439 km        sex         -1.81 #>  3 0.00439 km        sex         -1.81 #>  4 0.00439 km        sex         -1.81 #>  5 0.0175  km        sex         -1.82 #>  6 0.0219  km        sex         -1.83 #>  7 0.0219  km        sex         -1.83 #>  8 0.0307  km        sex         -1.84 #>  9 0.0351  km        sex         -1.85 #> 10 0.0395  km        sex         -1.85 #> # ℹ 155 more rows"},{"path":"https://maple-health-group.github.io/easysurv/reference/inspect_surv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect Survival Data — inspect_surv_data","title":"Inspect Survival Data — inspect_surv_data","text":"Quickly inspect survival data ensure correct format.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/inspect_surv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect Survival Data — inspect_surv_data","text":"","code":"inspect_surv_data(data, time, event, group = NULL)"},{"path":"https://maple-health-group.github.io/easysurv/reference/inspect_surv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect Survival Data — inspect_surv_data","text":"data data frame containing survival data. time column name data containing time--event data. event column name data containing event indicator data. group Optional. column name data containing group indicator data.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/inspect_surv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect Survival Data — inspect_surv_data","text":"list containing tibbles summarise first rows survival data, sample sizes, events, median survival.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/inspect_surv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect Survival Data — inspect_surv_data","text":"","code":"inspect_surv_data(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\" ) #>  #> ── Inspect Survival Data ─────────────────────────────────────────────────────── #>  #> ── First Few Rows ── #>  #> # A tibble: 6 × 4 #>   censrec rectime group recyrs #>     <int>   <int> <fct>  <dbl> #> 1       0    1342 Good    3.68 #> 2       0    1578 Good    4.32 #> 3       0    1760 Good    4.82 #> 4       0    1152 Good    3.16 #> 5       0     967 Good    2.65 #> 6       0     629 Good    1.72 #>  #> ── Sample Sizes ── #>  #> # A tibble: 3 × 2 #>   group      n #>   <fct>  <int> #> 1 Good     229 #> 2 Medium   229 #> 3 Poor     228 #>  #> ── Events Summary ── #>  #> # A tibble: 6 × 4 #>   group  censrec     n percent #>   <fct>    <int> <int>   <dbl> #> 1 Good         0   178   0.777 #> 2 Good         1    51   0.223 #> 3 Medium       0   126   0.550 #> 4 Medium       1   103   0.450 #> 5 Poor         0    83   0.364 #> 6 Poor         1   145   0.636 #>  #> ── Survival Summary ── #>  #> # A tibble: 3 × 9 #>   records n.max n.start events rmean `se(rmean)` median `0.95LCL` `0.95UCL` #>     <dbl> <dbl>   <dbl>  <dbl> <dbl>       <dbl>  <dbl>     <dbl>     <dbl> #> 1     229   229     229     51  5.93       0.162  NA        NA        NA    #> 2     229   229     229    103  4.60       0.186   5.25      4.12      5.57 #> 3     228   228     228    145  3.10       0.177   2.18      1.98      2.62"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot.fit_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for fit_models — plot.fit_models","title":"Plot method for fit_models — plot.fit_models","text":"Plot method fit_models","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot.fit_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for fit_models — plot.fit_models","text":"","code":"# S3 method for fit_models plot(   x,   eval_time = NULL,   km_include = TRUE,   subtitle_include = TRUE,   add_plotly = FALSE,   ... )"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot.fit_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for fit_models — plot.fit_models","text":"x object class fit_models eval_time Time points evaluate survival function. Default NULL. km_include Logical value indicating whether include Kaplan-Meier survival data. Default TRUE. subtitle_include Logical value indicating whether include subtitle plot. Default TRUE. add_plotly Logical value indicating whether add plotly interactivity. Default FALSE. ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot.fit_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for fit_models — plot.fit_models","text":"list containing predictions plots survival hazards models fit_models object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot.fit_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for fit_models — plot.fit_models","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\",   covariates = \"group\" )  plot(models) #> ℹ Survival plots have been printed. #> ℹ Hazard plots have been printed."},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_KM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Kaplan-Meier Data — plot_km","title":"Plot Kaplan-Meier Data — plot_km","text":"Generates Kaplan-Meier survival curve plot using ggsurvfit::ggsurvfit() customizable options. function provides sensible defaults allowing customization.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_KM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Kaplan-Meier Data — plot_km","text":"","code":"plot_km(   fit,   risktable = TRUE,   risktable_symbols = TRUE,   median_line = TRUE,   legend_position = \"top\",   plot_theme = theme_easysurv(),   risktable_theme = theme_risktable_easysurv() )"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_KM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Kaplan-Meier Data — plot_km","text":"fit survival::survfit object representing survival data. risktable Logical value indicating whether include risk table plot. Default TRUE. risktable_symbols Logical value indicating whether include symbols instead text label risk table strata. Default TRUE. median_line Logical value indicating whether include line representing median survival time. Default TRUE. legend_position Position legend plot. Default \"top\". plot_theme ggplot2 theme plot. Default theme_easysurv(). risktable_theme ggplot2 theme risk table. Default theme_risktable_easysurv().","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_KM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Kaplan-Meier Data — plot_km","text":"ggplot object representing Kaplan-Meier survival curve plot.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_KM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Kaplan-Meier Data — plot_km","text":"","code":"library(ggsurvfit) #> Loading required package: ggplot2 fit <- survfit2(Surv(time, status) ~ surg, data = df_colon) plot_km(fit, risktable_symbols = FALSE)"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_cloglog.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Log Log Plot — plot_cloglog","title":"Cumulative Log Log Plot — plot_cloglog","text":"Generates Cumulative Log Log survival curve plot using ggsurvfit::ggsurvfit() customizable options.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_cloglog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Log Log Plot — plot_cloglog","text":"","code":"plot_cloglog(   fit,   median_line = FALSE,   legend_position = \"top\",   plot_theme = theme_easysurv() )"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_cloglog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Log Log Plot — plot_cloglog","text":"fit survival::survfit object representing survival data. median_line Logical value indicating whether include line representing median survival time. Default FALSE. legend_position Position legend plot. Default \"top\". plot_theme ggplot2 theme plot. Default theme_easysurv().","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_cloglog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Log Log Plot — plot_cloglog","text":"ggplot object representing cumulative log log plot.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_cloglog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Log Log Plot — plot_cloglog","text":"","code":"library(ggsurvfit) fit <- survfit2(Surv(time, status) ~ surg, data = df_colon) plot_cloglog(fit)"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_schoenfeld.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Schoenfeld Residuals — plot_schoenfeld","title":"Plot Schoenfeld Residuals — plot_schoenfeld","text":"Plot residuals generated get_schoenfeld function. function creates visual representation Schoenfeld residuals Cox proportional hazards model. allows customization plot, including addition horizontal smoothed lines, styling points plot elements.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_schoenfeld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Schoenfeld Residuals — plot_schoenfeld","text":"","code":"plot_schoenfeld(   residuals,   hline = TRUE,   sline = TRUE,   sline_se = TRUE,   hline_col = \"#F8766D\",   hline_size = 1,   hline_alpha = 1,   hline_yintercept = 0,   hline_lty = \"dashed\",   sline_col = \"#00BFC4\",   sline_size = 1,   sline_alpha = 0.2,   sline_lty = \"dashed\",   point_col = \"black\",   point_size = 1,   point_shape = 19,   point_alpha = 1,   plot_theme = ggplot2::theme_bw() )"},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_schoenfeld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Schoenfeld Residuals — plot_schoenfeld","text":"residuals data frame containing Schoenfeld residuals, typically columns time, residual, transform, variable. hline Logical. TRUE, horizontal line added plot. Default TRUE. sline Logical. TRUE, smooth line added plot. Default TRUE. sline_se Logical. TRUE, confidence intervals displayed around smooth line. Default TRUE. hline_col Color horizontal line. Default \"#F8766D\" (red). hline_size Line width horizontal line. Default 1. hline_alpha Transparency horizontal line. Default 1. hline_yintercept Y-intercept horizontal line. Default 0. hline_lty Line type horizontal line. Default \"dashed\". sline_col Color smooth line. Default \"#00BFC4\" (blue). sline_size Line width smooth line. Default 1. sline_alpha Transparency smooth line. Default 0.2. sline_lty Line type smooth line. Default \"dashed\". point_col Color points representing residuals. Default \"black\". point_size Size points representing residuals. Default 1. point_shape Shape points representing residuals. Default 19. point_alpha Transparency points representing residuals. Default 1. plot_theme ggplot2 theme plot. Default ggplot2::theme_bw().","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_schoenfeld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Schoenfeld Residuals — plot_schoenfeld","text":"ggplot object representing plot Schoenfeld residuals.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/plot_schoenfeld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Schoenfeld Residuals — plot_schoenfeld","text":"","code":"library(survival) test_fit <- survival::coxph(survival::Surv(time, status) ~ sex, data = lung) test_fit_zph <- survival::cox.zph(test_fit) plot_schoenfeld(get_schoenfeld(test_fit_zph))"},{"path":"https://maple-health-group.github.io/easysurv/reference/predict.fit_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for fit_models — predict.fit_models","title":"Predict method for fit_models — predict.fit_models","text":"Predict method fit_models","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict.fit_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for fit_models — predict.fit_models","text":"","code":"# S3 method for fit_models predict(object, eval_time = NULL, type = c(\"survival\", \"hazard\"), ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/predict.fit_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for fit_models — predict.fit_models","text":"object object class fit_models eval_time (Optional) vector evaluation time points generating predictions. Default NULL, left NULL, generates sequence 0 5 times maximum observed time. type character vector indicating type predictions generate. Default c(\"survival\", \"hazard\"). ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict.fit_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for fit_models — predict.fit_models","text":"list predictions model fit_models object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict.fit_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for fit_models — predict.fit_models","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\",   covariates = \"group\" )  predict(models) #> $Good #> $Good$profiles #>    profile group #> 1 profile1  Good #>  #> $Good$predicted_surv #> # A tibble: 100 × 8 #>    .eval_time Exponential Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl> <dbl>        <dbl>    <dbl>          <dbl> #>  1      0           1     1            1        1              1     #>  2      0.374       0.978 0.995        1.00     0.983          0.996 #>  3      0.747       0.956 0.984        0.998    0.966          0.986 #>  4      1.12        0.935 0.968        0.988    0.948          0.972 #>  5      1.49        0.914 0.950        0.970    0.930          0.955 #>  6      1.87        0.893 0.930        0.946    0.911          0.934 #>  7      2.24        0.873 0.908        0.917    0.891          0.912 #>  8      2.62        0.854 0.885        0.886    0.872          0.887 #>  9      2.99        0.835 0.860        0.855    0.851          0.862 #> 10      3.36        0.816 0.835        0.824    0.830          0.835 #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Good$predicted_hazards #> # A tibble: 100 × 8 #>    .eval_time Exponential  Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl>  <dbl>        <dbl>    <dbl>          <dbl> #>  1      0          0.0604 0        NaN          0.0440         0      #>  2      0.374      0.0604 0.0234     0.000756   0.0463         0.0196 #>  3      0.747      0.0604 0.0364     0.0142     0.0486         0.0327 #>  4      1.12       0.0604 0.0463     0.0380     0.0510         0.0437 #>  5      1.49       0.0604 0.0544     0.0598     0.0536         0.0534 #>  6      1.87       0.0604 0.0613     0.0760     0.0563         0.0618 #>  7      2.24       0.0604 0.0672     0.0871     0.0591         0.0692 #>  8      2.62       0.0604 0.0724     0.0942     0.0621         0.0757 #>  9      2.99       0.0604 0.0770     0.0986     0.0652         0.0813 #> 10      3.36       0.0604 0.0811     0.101      0.0685         0.0861 #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Good$bshazard #>           time     hazard         lcl        ucl #> 1   0.02191781 0.01169274 0.003930704 0.03478260 #> 2   0.04657534 0.01200839 0.004115436 0.03503915 #> 3   0.12602740 0.01308461 0.004764573 0.03593336 #> 4   0.15616438 0.01351762 0.005033385 0.03630280 #> 5   0.31232877 0.01599927 0.006642671 0.03853522 #> 6   0.40547945 0.01768783 0.007796044 0.04013051 #> 7   0.53424658 0.02031097 0.009652168 0.04274020 #> 8   0.56164384 0.02091090 0.010088943 0.04334108 #> 9   0.58356164 0.02140357 0.010449727 0.04383970 #> 10  0.62739726 0.02242402 0.011201806 0.04488887 #> 11  0.74794521 0.02548813 0.013478492 0.04819863 #> 12  0.81095890 0.02720203 0.014794148 0.05001644 #> 13  0.87397260 0.02903095 0.016201130 0.05202083 #> 14  0.88219178 0.02927840 0.016391222 0.05229779 #> 15  1.00821918 0.03331335 0.019482285 0.05696349 #> 16  1.16712329 0.03889543 0.023848145 0.06343697 #> 17  1.18356164 0.03952379 0.024327547 0.06421239 #> 18  1.26301370 0.04257715 0.026687163 0.06792831 #> 19  1.30136986 0.04403110 0.027850042 0.06961345 #> 20  1.30410959 0.04413683 0.027934003 0.06973793 #> 21  1.44931507 0.05011962 0.032519477 0.07724529 #> 22  1.46027397 0.05060277 0.032873655 0.07789339 #> 23  1.48493151 0.05163095 0.033657828 0.07920162 #> 24  1.50136986 0.05225786 0.034169117 0.07992258 #> 25  1.50684932 0.05246852 0.034339993 0.08016733 #> 26  1.51506849 0.05278610 0.034596693 0.08053869 #> 27  1.52602740 0.05321253 0.034939626 0.08104190 #> 28  1.53150685 0.05342704 0.035111356 0.08129702 #> 29  1.55068493 0.05418465 0.035713626 0.08220884 #> 30  1.56164384 0.05462238 0.036058506 0.08274342 #> 31  1.63835616 0.05778713 0.038479909 0.08678170 #> 32  1.67671233 0.05943761 0.039689478 0.08901175 #> 33  1.72328767 0.06144509 0.041141366 0.09176892 #> 34  1.74520548 0.06224136 0.041795291 0.09268954 #> 35  1.78356164 0.06365974 0.042934376 0.09438968 #> 36  1.78630137 0.06376228 0.043015407 0.09451562 #> 37  1.81369863 0.06479681 0.043822690 0.09580944 #> 38  1.89589041 0.06800224 0.046201283 0.10009038 #> 39  1.90410959 0.06833137 0.046434726 0.10055355 #> 40  1.93698630 0.06966393 0.047358973 0.10247399 #> 41  1.97808219 0.07117016 0.048473116 0.10449486 #> 42  1.99726027 0.07178068 0.048975109 0.10520582 #> 43  2.01095890 0.07221997 0.049330232 0.10573080 #> 44  2.02739726 0.07275068 0.049752353 0.10638011 #> 45  2.03013699 0.07283951 0.049822263 0.10649042 #> 46  2.04657534 0.07337476 0.050238957 0.10716495 #> 47  2.04931507 0.07346435 0.050307934 0.10727951 #> 48  2.06301370 0.07391395 0.050650735 0.10786164 #> 49  2.06849315 0.07409456 0.050786861 0.10809889 #> 50  2.07671233 0.07436630 0.050989959 0.10845951 #> 51  2.08493151 0.07463903 0.051191723 0.10882590 #> 52  2.08767123 0.07473017 0.051258676 0.10894932 #> 53  2.14794521 0.07676352 0.052691468 0.11183286 #> 54  2.18904110 0.07818152 0.053621341 0.11399100 #> 55  2.19452055 0.07837256 0.053742280 0.11429098 #> 56  2.20821918 0.07877775 0.054041550 0.11483633 #> 57  2.35068493 0.08242611 0.056882134 0.11944108 #> 58  2.36986301 0.08292997 0.057222697 0.12018622 #> 59  2.38356164 0.08329175 0.057459420 0.12073766 #> 60  2.40273973 0.08380090 0.057781546 0.12153693 #> 61  2.43835616 0.08475474 0.058350585 0.12310702 #> 62  2.44383562 0.08489500 0.058436483 0.12333325 #> 63  2.50958904 0.08614380 0.059503904 0.12471039 #> 64  2.56438356 0.08719849 0.060291872 0.12611280 #> 65  2.58904110 0.08767730 0.060614834 0.12682225 #> 66  2.64931507 0.08885883 0.061319199 0.12876705 #> 67  2.65479452 0.08896703 0.061377176 0.12895889 #> 68  2.65753425 0.08902118 0.061405784 0.12905577 #> 69  2.66301370 0.08912958 0.061462239 0.12925141 #> 70  2.69041096 0.08963174 0.061743516 0.13011649 #> 71  2.69315068 0.08966505 0.061776064 0.13014460 #> 72  2.70136986 0.08976505 0.061872210 0.13023235 #> 73  2.71506849 0.08993195 0.062027417 0.13039003 #> 74  2.72602740 0.09006570 0.062147001 0.13052651 #> 75  2.74520548 0.09030024 0.062346344 0.13078769 #> 76  2.98356164 0.09290381 0.063935093 0.13499814 #> 77  2.98630137 0.09292075 0.063949013 0.13501796 #> 78  2.98904110 0.09293769 0.063962653 0.13503839 #> 79  2.99726027 0.09298852 0.064001891 0.13510328 #> 80  3.02739726 0.09317516 0.064124103 0.13538763 #> 81  3.03835616 0.09324312 0.064160083 0.13550917 #> 82  3.05205479 0.09332814 0.064198706 0.13567472 #> 83  3.06027397 0.09337919 0.064218493 0.13578134 #> 84  3.06575342 0.09341324 0.064230275 0.13585545 #> 85  3.08219178 0.09351546 0.064258867 0.13609236 #> 86  3.13972603 0.09387411 0.064279825 0.13709353 #> 87  3.15616438 0.09397683 0.064263525 0.13742858 #> 88  3.18630137 0.09406409 0.064275222 0.13765884 #> 89  3.20273973 0.09406946 0.064295151 0.13763188 #> 90  3.20821918 0.09407124 0.064299508 0.13762779 #> 91  3.21643836 0.09407393 0.064303896 0.13762625 #> 92  3.32054795 0.09410793 0.064137389 0.13808330 #> 93  3.33698630 0.09411330 0.064073963 0.13823576 #> 94  3.33972603 0.09411419 0.064062428 0.13826328 #> 95  3.34794521 0.09411688 0.064026183 0.13834944 #> 96  3.37808219 0.09412672 0.063872457 0.13871143 #> 97  3.40547945 0.09413568 0.063704874 0.13910278 #> 98  3.41369863 0.09412493 0.063659095 0.13917105 #> 99  3.46301370 0.09386261 0.063472243 0.13880381 #> 100 3.50410959 0.09364456 0.063246821 0.13865209 #> 101 3.55068493 0.09339805 0.062916425 0.13864737 #> 102 3.60821918 0.09309444 0.062402566 0.13888171 #> 103 3.64109589 0.09292139 0.062059013 0.13913185 #> 104 3.67123288 0.09267267 0.061786815 0.13899766 #> 105 3.67397260 0.09264440 0.061765106 0.13896172 #> 106 3.67671233 0.09261615 0.061743123 0.13892642 #> 107 3.67945205 0.09258790 0.061720867 0.13889176 #> 108 3.69589041 0.09241861 0.061581625 0.13869722 #> 109 3.69863014 0.09239043 0.061557471 0.13866702 #> 110 3.70410959 0.09233408 0.061508355 0.13860854 #> 111 3.71232877 0.09224963 0.061432671 0.13852555 #> 112 3.71506849 0.09222150 0.061406910 0.13849915 #> 113 3.72054795 0.09216526 0.061354589 0.13844824 #> 114 3.73698630 0.09199674 0.061191291 0.13831053 #> 115 3.75616438 0.09180053 0.060988916 0.13817816 #> 116 3.89041096 0.09043869 0.059237950 0.13807292 #> 117 3.90958904 0.09019843 0.059010122 0.13787052 #> 118 3.92328767 0.09001492 0.058857011 0.13766731 #> 119 3.93150685 0.08990500 0.058762059 0.13755319 #> 120 3.94794521 0.08968555 0.058565300 0.13734240 #> 121 3.99726027 0.08903043 0.057921675 0.13684716 #> 122 4.04109589 0.08845211 0.057285579 0.13657496 #> 123 4.06301370 0.08816436 0.056946272 0.13649629 #> 124 4.07123288 0.08805670 0.056815536 0.13647644 #> 125 4.08219178 0.08791335 0.056638336 0.13645806 #> 126 4.10684932 0.08759167 0.056227928 0.13645000 #> 127 4.11506849 0.08748471 0.056087636 0.13645742 #> 128 4.14794521 0.08703754 0.055560707 0.13634695 #> 129 4.16712329 0.08675154 0.055303791 0.13608162 #> 130 4.32328767 0.08445741 0.052807524 0.13507647 #> 131 4.38356164 0.08358419 0.051697058 0.13513955 #> 132 4.43013699 0.08286964 0.050977399 0.13471414 #> 133 4.44931507 0.08257719 0.050663250 0.13459444 #> 134 4.45205479 0.08253549 0.050617562 0.13457992 #> 135 4.45753425 0.08245217 0.050525589 0.13455281 #> 136 4.46301370 0.08236893 0.050432831 0.13452824 #> 137 4.47123288 0.08224422 0.050292240 0.13449614 #> 138 4.49589041 0.08187124 0.049860322 0.13443355 #> 139 4.50684932 0.08170601 0.049663647 0.13442172 #> 140 4.56438356 0.08084403 0.048587352 0.13451561 #> 141 4.58904110 0.08047740 0.048105571 0.13463330 #> 142 4.60000000 0.08031499 0.047887880 0.13469999 #> 143 4.60273973 0.08027443 0.047833129 0.13471803 #> 144 4.63561644 0.07977167 0.047214314 0.13477945 #> 145 4.66027397 0.07937834 0.046783990 0.13468112 #> 146 4.66575342 0.07929119 0.046686328 0.13466669 #> 147 4.70410959 0.07868386 0.045983207 0.13463937 #> 148 4.71232877 0.07855433 0.045828320 0.13464998 #> 149 4.71506849 0.07851120 0.045776376 0.13465478 #> 150 4.71780822 0.07846809 0.045724277 0.13466021 #> 151 4.77534247 0.07756828 0.044596807 0.13491633 #> 152 4.79726027 0.07722821 0.044152100 0.13508297 #> 153 4.80273973 0.07714343 0.044039753 0.13513039 #> 154 4.81095890 0.07701643 0.043870398 0.13520576 #> 155 4.82191781 0.07684742 0.043643090 0.13531412 #> 156 4.83561644 0.07663668 0.043356659 0.13546204 #> 157 4.84109589 0.07655255 0.043241406 0.13552503 #> 158 4.87945205 0.07595590 0.042469001 0.13584728 #> 159 4.89315068 0.07573854 0.042210508 0.13589807 #> 160 4.95068493 0.07483241 0.041086570 0.13629491 #> 161 4.98082192 0.07436211 0.040476235 0.13661655 #> 162 5.02191781 0.07372555 0.039624254 0.13717499 #> 163 5.04109589 0.07343035 0.039220016 0.13748125 #> 164 5.07671233 0.07288527 0.038460027 0.13812424 #> 165 5.09041096 0.07267670 0.038164983 0.13839656 #> 166 5.10410959 0.07246872 0.037868647 0.13868243 #> 167 5.12054795 0.07221395 0.037541546 0.13890891 #> 168 5.16164384 0.07157898 0.036717451 0.13953991 #> 169 5.21917808 0.07069938 0.035531142 0.14067664 #> 170 5.26575342 0.06999524 0.034550523 0.14180202 #> 171 5.27671233 0.06983058 0.034317886 0.14209239 #> 172 5.29589041 0.06954337 0.033909449 0.14262337 #> 173 5.30958904 0.06933893 0.033616856 0.14302015 #> 174 5.41369863 0.06774843 0.031441845 0.14597904 #> 175 5.43561644 0.06741133 0.030985497 0.14665855 #> 176 5.44931507 0.06720150 0.030699406 0.14710518 #> 177 5.49863014 0.06645149 0.029666300 0.14884905 #> 178 5.50410959 0.06636867 0.029551379 0.14905567 #> 179 5.50684932 0.06632730 0.029493920 0.14915994 #> 180 5.51780822 0.06616208 0.029264109 0.14958328 #> 181 5.52602740 0.06603844 0.029091807 0.14990734 #> 182 5.56164384 0.06550531 0.028346345 0.15137563 #> 183 5.58630137 0.06513874 0.027832092 0.15245193 #> 184 5.61369863 0.06470228 0.027269621 0.15351827 #> 185 5.63287671 0.06439481 0.026876541 0.15428666 #> 186 5.65753425 0.06400164 0.026371444 0.15532748 #> 187 5.73424658 0.06279373 0.024809333 0.15893422 #> 188 5.84109589 0.06114094 0.022684369 0.16479254 #> 189 5.88493151 0.06043816 0.021837545 0.16727024 #> 190 5.90684932 0.06008981 0.021418139 0.16858537 #> 191 5.92054795 0.05987311 0.021157587 0.16943279 #> 192 5.94520548 0.05948501 0.020691940 0.17100701 #> 193 5.95068493 0.05939911 0.020589082 0.17136531 #> 194 5.95890411 0.05927049 0.020435237 0.17190851 #> 195 6.00547945 0.05854689 0.019574114 0.17511591 #> 196 6.01369863 0.05842012 0.019424142 0.17570456 #> 197 6.07397260 0.05749879 0.018344214 0.18022638 #> 198 6.12876712 0.05664852 0.017395424 0.18447695 #> 199 6.22191781 0.05523145 0.015844886 0.19252352 #> 200 6.29041096 0.05421216 0.014761537 0.19909566 #> 201 6.29315068 0.05417178 0.014719268 0.19937007 #> 202 6.35616438 0.05324303 0.013770559 0.20586095 #> 203 6.49315068 0.05126832 0.011850115 0.22180720 #> 204 6.49863014 0.05119088 0.011777478 0.22250145 #> 205 6.57808219 0.05007947 0.010761453 0.23304970 #> 206 6.67945205 0.04869073 0.009560421 0.24797941 #> 207 6.70958904 0.04828534 0.009223541 0.25277429 #> 208 6.72876712 0.04802912 0.009014006 0.25591249 #> 209 6.76986301 0.04748465 0.008577655 0.26286816 #> 210 6.95616438 0.04508905 0.006804284 0.29878560 #> 211 6.98904110 0.04467889 0.006524434 0.30595806 #> 212 7.00273973 0.04450909 0.006410684 0.30902460 #> 213 7.28493151 0.04115009 0.004408642 0.38409333 #>  #>  #> $Medium #> $Medium$profiles #>    profile  group #> 1 profile2 Medium #>  #> $Medium$predicted_surv #> # A tibble: 100 × 8 #>    .eval_time Exponential Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl> <dbl>        <dbl>    <dbl>          <dbl> #>  1      0           1     1            1        1              1     #>  2      0.374       0.950 0.986        0.998    0.962          0.988 #>  3      0.747       0.903 0.957        0.974    0.923          0.960 #>  4      1.12        0.858 0.920        0.925    0.884          0.921 #>  5      1.49        0.815 0.877        0.866    0.845          0.876 #>  6      1.87        0.774 0.832        0.806    0.806          0.826 #>  7      2.24        0.736 0.785        0.749    0.767          0.775 #>  8      2.62        0.699 0.738        0.697    0.728          0.725 #>  9      2.99        0.664 0.691        0.650    0.689          0.676 #> 10      3.36        0.631 0.646        0.607    0.650          0.629 #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Medium$predicted_hazards #> # A tibble: 100 × 8 #>    .eval_time Exponential  Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl>  <dbl>        <dbl>    <dbl>          <dbl> #>  1      0           0.137 0          NaN         0.102         0      #>  2      0.374       0.137 0.0627       0.0239    0.107         0.0579 #>  3      0.747       0.137 0.0944       0.108     0.112         0.0949 #>  4      1.12        0.137 0.117        0.162     0.118         0.124  #>  5      1.49        0.137 0.135        0.186     0.124         0.146  #>  6      1.87        0.137 0.149        0.195     0.130         0.163  #>  7      2.24        0.137 0.161        0.195     0.137         0.176  #>  8      2.62        0.137 0.170        0.191     0.143         0.184  #>  9      2.99        0.137 0.179        0.186     0.151         0.190  #> 10      3.36        0.137 0.186        0.179     0.158         0.193  #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Medium$bshazard #>           time     hazard        lcl        ucl #> 1   0.04657534 0.03999115 0.01827684 0.08750378 #> 2   0.17260274 0.04743482 0.02410035 0.09336222 #> 3   0.19452055 0.04886412 0.02525774 0.09453347 #> 4   0.46027397 0.06974419 0.04297021 0.11320054 #> 5   0.46301370 0.06999896 0.04319011 0.11344854 #> 6   0.48493151 0.07207096 0.04497462 0.11549232 #> 7   0.52328767 0.07582896 0.04819635 0.11930428 #> 8   0.61095890 0.08461881 0.05599129 0.12788317 #> 9   0.75616438 0.10147456 0.07033768 0.14639503 #> 10  0.78082192 0.10422704 0.07279853 0.14922383 #> 11  0.84383562 0.11153707 0.07923539 0.15700709 #> 12  0.90136986 0.11865832 0.08525700 0.16514534 #> 13  0.92602740 0.12184781 0.08786036 0.16898280 #> 14  0.95890411 0.12623423 0.09133750 0.17446373 #> 15  0.96712329 0.12735529 0.09220632 0.17590301 #> 16  0.98356164 0.12962736 0.09394186 0.17886864 #> 17  1.01095890 0.13283106 0.09661452 0.18262357 #> 18  1.01369863 0.13311091 0.09686729 0.18291535 #> 19  1.01643836 0.13339135 0.09711997 0.18320900 #> 20  1.01917808 0.13367238 0.09737255 0.18350455 #> 21  1.02465753 0.13423622 0.09787739 0.18410139 #> 22  1.05479452 0.13738014 0.10064395 0.18752546 #> 23  1.07945205 0.14000713 0.10288970 0.19051466 #> 24  1.15068493 0.14788179 0.10923538 0.20020092 #> 25  1.16164384 0.14913198 0.11018750 0.20184093 #> 26  1.17534247 0.15070959 0.11136696 0.20395081 #> 27  1.20000000 0.15359146 0.11345800 0.20792133 #> 28  1.23013699 0.15718870 0.11595357 0.21308776 #> 29  1.24931507 0.15855373 0.11721726 0.21446743 #> 30  1.29589041 0.16173536 0.12010608 0.21779352 #> 31  1.30410959 0.16230341 0.12059566 0.21843570 #> 32  1.31780822 0.16325460 0.12139725 0.21954423 #> 33  1.34520548 0.16517375 0.12294435 0.22190827 #> 34  1.35616438 0.16594771 0.12354148 0.22291009 #> 35  1.36438356 0.16653056 0.12398096 0.22368296 #> 36  1.37534247 0.16731088 0.12455559 0.22474247 #> 37  1.37808219 0.16750653 0.12469720 0.22501257 #> 38  1.41917808 0.17046888 0.12672112 0.22931963 #> 39  1.44931507 0.17267452 0.12808352 0.23278945 #> 40  1.47945205 0.17425241 0.12915676 0.23509339 #> 41  1.49041096 0.17441237 0.12940341 0.23507630 #> 42  1.49315068 0.17445238 0.12946285 0.23507620 #> 43  1.50136986 0.17457248 0.12963575 0.23508599 #> 44  1.50684932 0.17465259 0.12974649 0.23510097 #> 45  1.51232877 0.17473273 0.12985358 0.23512273 #> 46  1.51780822 0.17481292 0.12995699 0.23515130 #> 47  1.54520548 0.17521439 0.13041819 0.23539723 #> 48  1.55342466 0.17533501 0.13053818 0.23550477 #> 49  1.58356164 0.17577799 0.13090463 0.23603368 #> 50  1.60547945 0.17610086 0.13109809 0.23655199 #> 51  1.62739726 0.17642433 0.13122994 0.23718326 #> 52  1.70684932 0.17755644 0.13120507 0.24028257 #> 53  1.74520548 0.17686077 0.13104568 0.23869335 #> 54  1.76986301 0.17641499 0.13084759 0.23785115 #> 55  1.81643836 0.17557603 0.13026773 0.23664297 #> 56  1.83561644 0.17523173 0.12995125 0.23628984 #> 57  1.84931507 0.17498622 0.12969782 0.23608860 #> 58  1.88219178 0.17439839 0.12899835 0.23577665 #> 59  1.95616438 0.17291671 0.12722082 0.23502589 #> 60  1.96438356 0.17267172 0.12710505 0.23457387 #> 61  1.98082192 0.17218280 0.12684996 0.23371641 #> 62  1.99178082 0.17185762 0.12666241 0.23317922 #> 63  2.00821918 0.17137100 0.12635488 0.23242489 #> 64  2.01917808 0.17104735 0.12613244 0.23195616 #> 65  2.02739726 0.17080502 0.12595650 0.23162246 #> 66  2.07671233 0.16935821 0.12473914 0.22993749 #> 67  2.09863014 0.16871912 0.12411120 0.22935999 #> 68  2.10958904 0.16840049 0.12377782 0.22910989 #> 69  2.11506849 0.16824139 0.12360638 0.22899439 #> 70  2.16986301 0.16665870 0.12172456 0.22818011 #> 71  2.17808219 0.16642259 0.12141724 0.22810993 #> 72  2.26027397 0.16397696 0.11991929 0.22422116 #> 73  2.29589041 0.16292763 0.11905794 0.22296214 #> 74  2.33698630 0.16172521 0.11790013 0.22184068 #> 75  2.33972603 0.16164537 0.11781689 0.22177825 #> 76  2.34246575 0.16156556 0.11773292 0.22171734 #> 77  2.34794521 0.16140607 0.11756278 0.22160006 #> 78  2.37260274 0.16069029 0.11676149 0.22114629 #> 79  2.37534247 0.16061096 0.11666893 0.22110325 #> 80  2.40000000 0.15989871 0.11580529 0.22078092 #> 81  2.43287671 0.15895668 0.11496452 0.21978282 #> 82  2.43561644 0.15887866 0.11492259 0.21964723 #> 83  2.44109589 0.15872272 0.11483641 0.21938078 #> 84  2.44657534 0.15856694 0.11474716 0.21912066 #> 85  2.51506849 0.15663251 0.11337397 0.21639662 #> 86  2.55616438 0.15548320 0.11232637 0.21522128 #> 87  2.56438356 0.15525436 0.11209749 0.21502636 #> 88  2.57534247 0.15494975 0.11178253 0.21478691 #> 89  2.58082192 0.15479767 0.11162093 0.21467586 #> 90  2.61917808 0.15373729 0.11041495 0.21405755 #> 91  2.64109589 0.15313462 0.10966963 0.21382593 #> 92  2.66849315 0.15247896 0.10909063 0.21312400 #> 93  2.77534247 0.15024494 0.10744941 0.21008530 #> 94  2.83835616 0.14894281 0.10598379 0.20931466 #> 95  2.90136986 0.14772725 0.10446930 0.20889716 #> 96  2.95068493 0.14706120 0.10410528 0.20774159 #> 97  2.95342466 0.14702429 0.10407845 0.20769085 #> 98  2.98082192 0.14665565 0.10377206 0.20726080 #> 99  2.99452055 0.14647168 0.10359312 0.20709824 #> 100 2.99726027 0.14643491 0.10355529 0.20706990 #> 101 3.00000000 0.14639815 0.10351678 0.20704294 #> 102 3.04931507 0.14573810 0.10270983 0.20679221 #> 103 3.06849315 0.14548221 0.10233929 0.20681278 #> 104 3.12328767 0.14475358 0.10111573 0.20722393 #> 105 3.15068493 0.14444933 0.10092914 0.20673523 #> 106 3.16986301 0.14424397 0.10082265 0.20636557 #> 107 3.18904110 0.14403890 0.10068353 0.20606354 #> 108 3.23835616 0.14351292 0.10017720 0.20559527 #> 109 3.26575342 0.14322154 0.09980510 0.20552467 #> 110 3.26849315 0.14319244 0.09976440 0.20552495 #> 111 3.27397260 0.14313425 0.09968112 0.20552951 #> 112 3.30136986 0.14284363 0.09922763 0.20563128 #> 113 3.30958904 0.14275657 0.09907974 0.20568723 #> 114 3.34794521 0.14235095 0.09831998 0.20610046 #> 115 3.36986301 0.14213863 0.09795724 0.20624702 #> 116 3.37260274 0.14211921 0.09795465 0.20619613 #> 117 3.43287671 0.14169272 0.09773611 0.20541871 #> 118 3.49863014 0.14122892 0.09714780 0.20531197 #> 119 3.50684932 0.14117105 0.09704915 0.20535228 #> 120 3.51506849 0.14111320 0.09694504 0.20540437 #> 121 3.55068493 0.14086281 0.09643211 0.20576479 #> 122 3.57808219 0.14067051 0.09597128 0.20618869 #> 123 3.62465753 0.14044671 0.09557382 0.20638788 #> 124 3.66301370 0.14034705 0.09553840 0.20617148 #> 125 3.67945205 0.14030435 0.09548608 0.20615896 #> 126 3.70136986 0.14024745 0.09538183 0.20621693 #> 127 3.71506849 0.14021190 0.09529678 0.20629634 #> 128 3.80000000 0.13999167 0.09443747 0.20752006 #> 129 3.83835616 0.13989233 0.09387084 0.20847651 #> 130 3.92876712 0.14035737 0.09422447 0.20907723 #> 131 4.00000000 0.14072486 0.09403905 0.21058789 #> 132 4.00821918 0.14076732 0.09399190 0.21082071 #> 133 4.02465753 0.14085229 0.09388201 0.21132235 #> 134 4.03287671 0.14089479 0.09381936 0.21159110 #> 135 4.05753425 0.14102238 0.09360116 0.21246863 #> 136 4.06301370 0.14105074 0.09354661 0.21267808 #> 137 4.11506849 0.14162294 0.09383233 0.21375422 #> 138 4.12328767 0.14172834 0.09390264 0.21391223 #> 139 4.17808219 0.14243305 0.09423142 0.21529097 #> 140 4.18356164 0.14250371 0.09425091 0.21546008 #> 141 4.18630137 0.14253906 0.09425974 0.21554677 #> 142 4.26575342 0.14356788 0.09425561 0.21867914 #> 143 4.33424658 0.14471641 0.09441669 0.22181289 #> 144 4.37808219 0.14580654 0.09508043 0.22359540 #> 145 4.38630137 0.14601185 0.09518737 0.22397362 #> 146 4.39452055 0.14621745 0.09528876 0.22436583 #> 147 4.48493151 0.14849825 0.09603846 0.22961352 #> 148 4.49863014 0.14884691 0.09609433 0.23055891 #> 149 4.53424658 0.14975728 0.09617059 0.23320272 #> 150 4.61369863 0.15268635 0.09765547 0.23872827 #> 151 4.61643836 0.15279548 0.09771085 0.23893417 #> 152 4.63835616 0.15367135 0.09813099 0.24064655 #> 153 4.66027397 0.15455224 0.09851044 0.24247576 #> 154 4.67671233 0.15521622 0.09876835 0.24392504 #> 155 4.69589041 0.15599446 0.09904044 0.24570037 #> 156 4.70410959 0.15632919 0.09914761 0.24648922 #> 157 4.71232877 0.15666464 0.09924913 0.24729494 #> 158 4.73698630 0.15767530 0.09952015 0.24981374 #> 159 4.73972603 0.15778800 0.09954718 0.25010305 #> 160 4.81095890 0.16101078 0.10062478 0.25763506 #> 161 4.83013699 0.16202493 0.10114048 0.25956055 #> 162 4.90136986 0.16584802 0.10276842 0.26764609 #> 163 4.95068493 0.16854749 0.10363074 0.27412961 #> 164 4.96986301 0.16960911 0.10390865 0.27685134 #> 165 4.98630137 0.17052439 0.10412175 0.27927466 #> 166 4.98904110 0.17067742 0.10415504 0.27968670 #> 167 5.00273973 0.17144461 0.10431203 0.28178201 #> 168 5.02191781 0.17252448 0.10450567 0.28481417 #> 169 5.02465753 0.17268644 0.10455795 0.28520651 #> 170 5.03561644 0.17336463 0.10486875 0.28659915 #> 171 5.04383562 0.17387502 0.10509416 0.28767082 #> 172 5.04657534 0.17404548 0.10516783 0.28803325 #> 173 5.05753425 0.17472901 0.10545515 0.28950913 #> 174 5.06027397 0.17490031 0.10552514 0.28988467 #> 175 5.07397260 0.17575934 0.10586407 0.29180199 #> 176 5.09863014 0.17731624 0.10642787 0.29542119 #> 177 5.10136986 0.17749008 0.10648685 0.29583678 #> 178 5.11232877 0.17818713 0.10671548 0.29752622 #> 179 5.11780822 0.17853669 0.10682543 0.29838727 #> 180 5.14520548 0.18029477 0.10733179 0.30285717 #> 181 5.19726027 0.18368296 0.10809848 0.31211752 #> 182 5.21643836 0.18494723 0.10831820 0.31578699 #> 183 5.25479452 0.18750193 0.10866023 0.32354960 #> 184 5.35890411 0.19432247 0.11021546 0.34261274 #> 185 5.36712329 0.19487009 0.11029533 0.34429702 #> 186 5.38356164 0.19596998 0.11043440 0.34775607 #> 187 5.41095890 0.19781693 0.11060622 0.35379147 #> 188 5.42191781 0.19856058 0.11065447 0.35630105 #> 189 5.45205479 0.20062005 0.11072872 0.36348660 #> 190 5.50410959 0.20414370 0.11071065 0.37642856 #> 191 5.50958904 0.20445965 0.11072585 0.37754282 #> 192 5.52054795 0.20509302 0.11074573 0.37981735 #> 193 5.52876712 0.20556934 0.11075152 0.38156365 #> 194 5.55342466 0.20700493 0.11072291 0.38701153 #> 195 5.56164384 0.20748569 0.11069835 0.38889750 #> 196 5.57260274 0.20812844 0.11065418 0.39146689 #> 197 5.61917808 0.21088239 0.11032603 0.40309059 #> 198 5.62191781 0.21104552 0.11029990 0.40381009 #> 199 5.63561644 0.21186305 0.11015833 0.40746764 #> 200 5.82465753 0.22269633 0.10702936 0.46336494 #> 201 5.83013699 0.22299388 0.10690537 0.46514290 #> 202 5.85753425 0.22448764 0.10624499 0.47432540 #> 203 5.87397260 0.22538869 0.10581787 0.48007072 #> 204 5.89863014 0.22674705 0.10513649 0.48902361 #> 205 5.96438356 0.23040952 0.10310529 0.51489641 #> 206 6.04109589 0.23448560 0.10070992 0.54595912 #> 207 6.10136986 0.23771754 0.09853104 0.57352107 #> 208 6.11780822 0.23860668 0.09789517 0.58157262 #> 209 6.12054795 0.23875520 0.09778763 0.58293718 #> 210 6.13424658 0.23949915 0.09724352 0.58985776 #> 211 6.44657534 0.25634018 0.08316198 0.79014819 #> 212 6.49863014 0.25905542 0.08057083 0.83292809 #> 213 6.52054795 0.26020726 0.07945443 0.85215913 #> 214 6.54246575 0.26136423 0.07832640 0.87213583 #> 215 7.02191781 0.28696349 0.05334766 1.54361130 #> 216 7.15616438 0.29435893 0.04683227 1.85015974 #>  #>  #> $Poor #> $Poor$profiles #>    profile group #> 1 profile3  Poor #>  #> $Poor$predicted_surv #> # A tibble: 100 × 8 #>    .eval_time Exponential Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl> <dbl>        <dbl>    <dbl>          <dbl> #>  1      0           1     1            1        1              1     #>  2      0.374       0.900 0.962        0.978    0.918          0.961 #>  3      0.747       0.811 0.892        0.880    0.839          0.881 #>  4      1.12        0.730 0.808        0.769    0.764          0.784 #>  5      1.49        0.657 0.722        0.671    0.692          0.686 #>  6      1.87        0.592 0.637        0.590    0.624          0.597 #>  7      2.24        0.533 0.558        0.523    0.559          0.518 #>  8      2.62        0.479 0.485        0.468    0.499          0.451 #>  9      2.99        0.432 0.420        0.422    0.442          0.394 #> 10      3.36        0.389 0.361        0.383    0.389          0.345 #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Poor$predicted_hazards #> # A tibble: 100 × 8 #>    .eval_time Exponential Gamma `Gen. Gamma` Gompertz `log-Logistic` #>         <dbl>       <dbl> <dbl>        <dbl>    <dbl>          <dbl> #>  1      0           0.281 0          NaN        0.223          0     #>  2      0.374       0.281 0.165        0.187    0.234          0.181 #>  3      0.747       0.281 0.238        0.344    0.246          0.280 #>  4      1.12        0.281 0.285        0.368    0.258          0.338 #>  5      1.49        0.281 0.319        0.355    0.271          0.368 #>  6      1.87        0.281 0.345        0.333    0.285          0.379 #>  7      2.24        0.281 0.365        0.309    0.299          0.377 #>  8      2.62        0.281 0.381        0.288    0.314          0.368 #>  9      2.99        0.281 0.395        0.268    0.330          0.356 #> 10      3.36        0.281 0.407        0.251    0.347          0.341 #> # ℹ 90 more rows #> # ℹ 2 more variables: `log-Normal` <dbl>, `Weibull (AFT)` <dbl> #>  #> $Poor$bshazard #>           time     hazard        lcl       ucl #> 1   0.04109589 0.08806728 0.04790201 0.1619107 #> 2   0.04383562 0.08847271 0.04823992 0.1622602 #> 3   0.04931507 0.08928916 0.04892207 0.1629644 #> 4   0.07945205 0.09391623 0.05282717 0.1669645 #> 5   0.11506849 0.09969469 0.05778530 0.1719993 #> 6   0.17808219 0.11080276 0.06749511 0.1818984 #> 7   0.18356164 0.11182528 0.06839650 0.1828294 #> 8   0.19726027 0.11442307 0.07068960 0.1852131 #> 9   0.26849315 0.12890542 0.08348624 0.1990341 #> 10  0.30958904 0.13770518 0.09147832 0.2072919 #> 11  0.32876712 0.14201488 0.09540174 0.2114031 #> 12  0.43835616 0.16936025 0.12001766 0.2389890 #> 13  0.46849315 0.17776360 0.12734926 0.2481357 #> 14  0.47397260 0.17933568 0.12870270 0.2498882 #> 15  0.47945205 0.18092167 0.13006179 0.2516700 #> 16  0.48493151 0.18252168 0.13142629 0.2534817 #> 17  0.49315068 0.18478670 0.13344180 0.2558878 #> 18  0.49589041 0.18549645 0.13410422 0.2565835 #> 19  0.50410959 0.18764211 0.13610368 0.2586966 #> 20  0.50958904 0.18908631 0.13744670 0.2601273 #> 21  0.53424658 0.19572404 0.14358575 0.2667946 #> 22  0.62191781 0.22126916 0.16647855 0.2940922 #> 23  0.63835616 0.22641765 0.17091061 0.2999518 #> 24  0.65205479 0.23079945 0.17462633 0.3050421 #> 25  0.66027397 0.23346913 0.17686380 0.3081910 #> 26  0.66301370 0.23436586 0.17761078 0.3092569 #> 27  0.67671233 0.23890148 0.18135299 0.3147118 #> 28  0.68219178 0.24074021 0.18285272 0.3169537 #> 29  0.68767123 0.24259309 0.18435373 0.3192309 #> 30  0.74520548 0.26031507 0.19966304 0.3393915 #> 31  0.75342466 0.26265785 0.20181003 0.3418519 #> 32  0.76986301 0.26740685 0.20611441 0.3469259 #> 33  0.78356164 0.27142988 0.20970843 0.3513172 #> 34  0.78904110 0.27305599 0.21114698 0.3531169 #> 35  0.80273973 0.27716401 0.21474377 0.3577281 #> 36  0.83561644 0.28727718 0.22336060 0.3694840 #> 37  0.84109589 0.28899823 0.22479222 0.3715430 #> 38  0.84931507 0.29159915 0.22693613 0.3746872 #> 39  0.86575342 0.29687143 0.23120883 0.3811820 #> 40  0.92054795 0.31514389 0.24525021 0.4049565 #> 41  0.92602740 0.31703189 0.24663344 0.4075247 #> 42  0.93972603 0.32147747 0.25001800 0.4133613 #> 43  0.94246575 0.32213536 0.25065189 0.4140052 #> 44  0.95342466 0.32478043 0.25317931 0.4166309 #> 45  0.97808219 0.33081153 0.25881079 0.4228428 #> 46  0.98082192 0.33148853 0.25943115 0.4235599 #> 47  0.98356164 0.33216691 0.26005034 0.4242827 #> 48  0.98630137 0.33284668 0.26066834 0.4250110 #> 49  1.01369863 0.33972137 0.26677673 0.4326112 #> 50  1.02739726 0.34321178 0.26977714 0.4366357 #> 51  1.03287671 0.34461797 0.27096633 0.4382889 #> 52  1.03835616 0.34602991 0.27214898 0.4399675 #> 53  1.07397260 0.35534964 0.27966551 0.4515157 #> 54  1.10410959 0.36343135 0.28577475 0.4621904 #> 55  1.12328767 0.36866969 0.28953383 0.4694351 #> 56  1.13698630 0.37245753 0.29215549 0.4748314 #> 57  1.14246575 0.37398353 0.29318916 0.4770425 #> 58  1.15068493 0.37628428 0.29472348 0.4804159 #> 59  1.16712329 0.38018810 0.29768771 0.4855524 #> 60  1.19452055 0.38482264 0.30233590 0.4898143 #> 61  1.22191781 0.38951367 0.30675143 0.4946054 #> 62  1.22739726 0.39045872 0.30760465 0.4956297 #> 63  1.24657534 0.39378448 0.31050859 0.4993943 #> 64  1.26027397 0.39617735 0.31250200 0.5022575 #> 65  1.26849315 0.39762004 0.31366482 0.5040466 #> 66  1.27397260 0.39858476 0.31442596 0.5052694 #> 67  1.29041096 0.40149297 0.31664091 0.5090833 #> 68  1.33150685 0.40885667 0.32171961 0.5195946 #> 69  1.33698630 0.40984865 0.32234670 0.5211033 #> 70  1.34246575 0.41084303 0.32296197 0.5226374 #> 71  1.34520548 0.41134113 0.32326518 0.5234140 #> 72  1.36986301 0.41585126 0.32586182 0.5306920 #> 73  1.38082192 0.41787160 0.32694004 0.5340939 #> 74  1.41095890 0.42044239 0.32968514 0.5361837 #> 75  1.43835616 0.42239082 0.33185595 0.5376249 #> 76  1.44109589 0.42258616 0.33205521 0.5377993 #> 77  1.45205479 0.42336842 0.33281928 0.5385530 #> 78  1.46575342 0.42434828 0.33369931 0.5396219 #> 79  1.46849315 0.42454452 0.33386523 0.5398527 #> 80  1.47123288 0.42474086 0.33402776 0.5400892 #> 81  1.48219178 0.42552711 0.33464398 0.5410924 #> 82  1.49041096 0.42611775 0.33507040 0.5419050 #> 83  1.49589041 0.42651196 0.33533762 0.5424755 #> 84  1.49863014 0.42670921 0.33546611 0.5427694 #> 85  1.50136986 0.42690654 0.33559117 0.5430691 #> 86  1.54246575 0.42987756 0.33705844 0.5482572 #> 87  1.56438356 0.43147055 0.33753142 0.5515541 #> 88  1.56986301 0.43186971 0.33761672 0.5524355 #> 89  1.57534247 0.43226925 0.33768902 0.5533396 #> 90  1.58082192 0.43266916 0.33774844 0.5542664 #> 91  1.58630137 0.43306944 0.33779507 0.5552157 #> 92  1.62739726 0.43418336 0.33799450 0.5577463 #> 93  1.63013699 0.43410810 0.33800139 0.5575416 #> 94  1.63287671 0.43403285 0.33800486 0.5573426 #> 95  1.64383562 0.43373199 0.33798441 0.5566039 #> 96  1.68493151 0.43260561 0.33741425 0.5546524 #> 97  1.70410959 0.43208097 0.33688088 0.5541839 #> 98  1.70684932 0.43200607 0.33679088 0.5541398 #> 99  1.70958904 0.43193119 0.33669745 0.5541015 #> 100 1.72054795 0.43163178 0.33628955 0.5540047 #> 101 1.72328767 0.43155696 0.33617907 0.5539947 #> 102 1.72876712 0.43140736 0.33594797 0.5539915 #> 103 1.73150685 0.43133258 0.33582738 0.5539983 #> 104 1.77534247 0.43013786 0.33345129 0.5548594 #> 105 1.78082192 0.42998876 0.33309689 0.5550647 #> 106 1.80000000 0.42946729 0.33176069 0.5559494 #> 107 1.84931507 0.42702330 0.32829075 0.5554494 #> 108 1.86027397 0.42600824 0.32765061 0.5538919 #> 109 1.91232877 0.42121960 0.32390422 0.5477729 #> 110 1.95068493 0.41772560 0.32041903 0.5445827 #> 111 1.97534247 0.41549477 0.31787226 0.5430984 #> 112 1.97808219 0.41524764 0.31757517 0.5429600 #> 113 2.00000000 0.41327586 0.31510111 0.5420385 #> 114 2.00273973 0.41303005 0.31478000 0.5419462 #> 115 2.00547945 0.41278438 0.31445633 0.5418589 #> 116 2.02739726 0.41082430 0.31177745 0.5413368 #> 117 2.03287671 0.41033574 0.31108372 0.5412544 #> 118 2.04109589 0.40960398 0.31002589 0.5411658 #> 119 2.04657534 0.40911687 0.30930947 0.5411299 #> 120 2.05753425 0.40806486 0.30787882 0.5408522 #> 121 2.06575342 0.40674449 0.30697002 0.5389487 #> 122 2.10410959 0.40063903 0.30240656 0.5307809 #> 123 2.10684932 0.40020645 0.30206067 0.5302418 #> 124 2.11506849 0.39891151 0.30100747 0.5286593 #> 125 2.12602740 0.39719143 0.29956740 0.5266295 #> 126 2.13424658 0.39590624 0.29846099 0.5251666 #> 127 2.16438356 0.39122937 0.29421807 0.5202278 #> 128 2.18356164 0.38828198 0.29137350 0.5174214 #> 129 2.18630137 0.38786274 0.29095844 0.5170412 #> 130 2.20547945 0.38494072 0.28799504 0.5145205 #> 131 2.24383562 0.37916254 0.28178732 0.5101870 #> 132 2.26575342 0.37589975 0.27809120 0.5081089 #> 133 2.26849315 0.37549388 0.27762237 0.5078685 #> 134 2.29041096 0.37165697 0.27409146 0.5039519 #> 135 2.30410959 0.36883521 0.27202552 0.5000980 #> 136 2.30684932 0.36827343 0.27160641 0.4993451 #> 137 2.34246575 0.36104773 0.26598541 0.4900850 #> 138 2.34794521 0.35994874 0.26509327 0.4887453 #> 139 2.35342466 0.35885309 0.26419415 0.4874277 #> 140 2.35890411 0.35776078 0.26328819 0.4861319 #> 141 2.37534247 0.35450375 0.26053053 0.4823731 #> 142 2.41917808 0.34596258 0.25290975 0.4732522 #> 143 2.58904110 0.31316923 0.22458224 0.4366996 #> 144 2.61917808 0.30740607 0.21977966 0.4299692 #> 145 2.62739726 0.30585278 0.21844718 0.4282313 #> 146 2.63013699 0.30533677 0.21800101 0.4276611 #> 147 2.66575342 0.29870727 0.21211774 0.4206439 #> 148 2.66849315 0.29820331 0.21165936 0.4201336 #> 149 2.68767123 0.29469932 0.20843060 0.4166744 #> 150 2.85753425 0.26679705 0.18554713 0.3836258 #> 151 2.90958904 0.25891717 0.17851357 0.3755350 #> 152 2.95890411 0.25184991 0.17205176 0.3686587 #> 153 2.98356164 0.24895824 0.17000510 0.3645785 #> 154 2.98630137 0.24863900 0.16977173 0.3641440 #> 155 2.99452055 0.24768373 0.16906462 0.3628626 #> 156 3.00000000 0.24704893 0.16858746 0.3620268 #> 157 3.01369863 0.24546903 0.16737485 0.3600006 #> 158 3.03561644 0.24296217 0.16537814 0.3569433 #> 159 3.15616438 0.22962515 0.15335001 0.3438390 #> 160 3.18356164 0.22688862 0.15082436 0.3413139 #> 161 3.19726027 0.22578524 0.15006042 0.3397230 #> 162 3.20547945 0.22512579 0.14958858 0.3388068 #> 163 3.22465753 0.22359455 0.14844916 0.3367788 #> 164 3.24109589 0.22229035 0.14743070 0.3351609 #> 165 3.24657534 0.22185731 0.14708286 0.3346458 #> 166 3.30684932 0.21714919 0.14299754 0.3297523 #> 167 3.35616438 0.21337150 0.13933764 0.3267415 #> 168 3.37534247 0.21192021 0.13784784 0.3257953 #> 169 3.39726027 0.21027368 0.13610502 0.3248596 #> 170 3.42465753 0.20888425 0.13509197 0.3229846 #> 171 3.64657534 0.19917340 0.12553502 0.3160078 #> 172 3.70410959 0.19821099 0.12455120 0.3154333 #> 173 3.71780822 0.19798253 0.12425211 0.3154641 #> 174 3.73424658 0.19770872 0.12386127 0.3155848 #> 175 3.74246575 0.19757196 0.12365300 0.3156792 #> 176 3.80273973 0.19657195 0.12187503 0.3170504 #> 177 3.94794521 0.19663247 0.12007525 0.3220008 #> 178 3.95342466 0.19667668 0.12002676 0.3222758 #> 179 3.96986301 0.19680936 0.11985861 0.3231635 #> 180 3.99726027 0.19703068 0.11950402 0.3248518 #> 181 4.03287671 0.19731878 0.11890875 0.3274334 #> 182 4.09041096 0.19821834 0.11838372 0.3318912 #> 183 4.11506849 0.19899452 0.11869880 0.3336076 #> 184 4.27397260 0.20406999 0.11889345 0.3502679 #> 185 4.30136986 0.20508002 0.11883492 0.3539180 #> 186 4.34794521 0.20761341 0.11990651 0.3594745 #> 187 4.35342466 0.20791351 0.12001456 0.3601898 #> 188 4.39178082 0.21002636 0.12066489 0.3655668 #> 189 4.50684932 0.21649461 0.12153005 0.3856652 #> 190 4.52876712 0.21792547 0.12184290 0.3897766 #> 191 4.56438356 0.22067729 0.12296392 0.3960387 #> 192 4.58904110 0.22260272 0.12364711 0.4007532 #> 193 4.66027397 0.22825997 0.12519499 0.4161717 #> 194 4.66301370 0.22848040 0.12524204 0.4168193 #> 195 4.71780822 0.23293407 0.12599389 0.4306422 #> 196 4.73698630 0.23451328 0.12617395 0.4358782 #> 197 4.73972603 0.23473975 0.12619624 0.4366433 #> 198 4.75342466 0.23600268 0.12661241 0.4399037 #> 199 4.79726027 0.24025137 0.12818247 0.4503012 #> 200 4.85205479 0.24566995 0.12980412 0.4649600 #> 201 4.90684932 0.25121074 0.13105063 0.4815455 #> 202 4.94794521 0.25544819 0.13174610 0.4952995 #> 203 4.96986301 0.25775850 0.13210889 0.5029142 #> 204 5.00273973 0.26152903 0.13344476 0.5125524 #> 205 5.03561644 0.26535472 0.13464002 0.5229732 #> 206 5.07945205 0.27054284 0.13601481 0.5381284 #> 207 5.08219178 0.27087044 0.13609247 0.5391246 #> 208 5.08493151 0.27119845 0.13616917 0.5401267 #> 209 5.41643836 0.31702047 0.14567906 0.6898862 #> 210 5.42739726 0.31887320 0.14621050 0.6954365 #> 211 5.51780822 0.33457721 0.14990967 0.7467291 #> 212 5.54520548 0.33948698 0.15079137 0.7643104 #> 213 5.61095890 0.35156640 0.15246782 0.8106559 #> 214 5.64109589 0.35727493 0.15309312 0.8337760 #> 215 6.26301370 0.52118585 0.16561287 1.6401787 #> 216 6.72876712 0.70756410 0.14975815 3.3430364 #> 217 6.75890411 0.72183393 0.14786656 3.5237462 #>  #>"},{"path":"https://maple-health-group.github.io/easysurv/reference/predict_and_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict and Plot Fitted Models — predict_and_plot","title":"Predict and Plot Fitted Models — predict_and_plot","text":"function generates survival hazard predictions plots model fit_models object. Optionally, interactive plotly outputs can added plot.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict_and_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict and Plot Fitted Models — predict_and_plot","text":"","code":"predict_and_plot(   fit_models,   eval_time = NULL,   km_include = TRUE,   subtitle_include = TRUE,   add_plotly = FALSE )"},{"path":"https://maple-health-group.github.io/easysurv/reference/predict_and_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict and Plot Fitted Models — predict_and_plot","text":"fit_models object returned fit_models. eval_time (Optional) vector evaluation time points generating predictions. Default NULL, left NULL, generates sequence 0 5 times maximum observed time. km_include logical indicating whether include Kaplan-Meier estimates plot outputs. Default TRUE. subtitle_include logical indicating whether include subtitle. Default TRUE. subtitle name group. add_plotly logical indicating whether add interactive plotly outputs plot. Default FALSE.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict_and_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict and Plot Fitted Models — predict_and_plot","text":"list predictions plots model fit_models object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/predict_and_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict and Plot Fitted Models — predict_and_plot","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\" )  predict_and_plot(models) #> ℹ Survival plots have been printed. #> ℹ Hazard plots have been printed."},{"path":"https://maple-health-group.github.io/easysurv/reference/print.fit_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for fit_models() — print.fit_models","title":"Print methods for fit_models() — print.fit_models","text":"Print methods fit_models()","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.fit_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for fit_models() — print.fit_models","text":"","code":"# S3 method for fit_models print(x, ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/print.fit_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for fit_models() — print.fit_models","text":"x object class fit_models ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.fit_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for fit_models() — print.fit_models","text":"print summary fit_models object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.fit_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for fit_models() — print.fit_models","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\",   covariates = \"group\" )  models #>  #> ── Fit Models Summary ────────────────────────────────────────────────────────── #> Engine: flexsurv. #> Approach: predict_by_covariate. #> • The predict_by argument was set to \"group\", which was also a covariate. #> • Therefore, models were fit on the full dataset. #> • This is sometimes referred to as \"joint fits\". #>  #> Distributions attempted: \"exp\", \"gamma\", \"gengamma\", \"gompertz\", \"llogis\", #> \"lnorm\", and \"weibull\". #>  #> ── Median survival estimates ── #>  #>       dist aic_rank group=Good group=Medium group=Poor #> 1      exp        7  11.479024     5.065736   2.466988 #> 2    gamma        4   8.511336     4.663958   2.538296 #> 3 gengamma        1   8.630495     4.507538   2.392662 #> 4 gompertz        6   8.530095     4.865718   2.606950 #> 5   llogis        3   8.474213     4.545136   2.336817 #> 6    lnorm        2   8.632037     4.558062   2.393145 #> 7  weibull        5   8.757940     4.741585   2.605819 #>  #> ℹ For comparison, the KM median survival times were NA, 5.255, and 2.184. #> ℹ The distribution with the best (lowest) AIC was \"gengamma\". #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `fit_models()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/print.get_km.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for get_km() — print.get_km","title":"Print methods for get_km() — print.get_km","text":"Print methods get_km()","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.get_km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for get_km() — print.get_km","text":"","code":"# S3 method for get_km print(x, ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/print.get_km.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for get_km() — print.get_km","text":"x object class get_km ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.get_km.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for get_km() — print.get_km","text":"summary Kaplan-Meier estimates, printed via console.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.get_km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for get_km() — print.get_km","text":"","code":"km_results <- get_km(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\",   risktable_symbols = FALSE )  print(km_results) #>  #> ── Kaplan-Meier Data ─────────────────────────────────────────────────────────── #> The get_km function has produced the following outputs: #> • km: A `survival::survfit()` object for Kaplan-Meier estimates. #> • km_for_excel: A list of stepped Kaplan-Meier data for external plotting. #> • km_per_group: A list of Kaplan-Meier estimates for each group. #> • km_plot: A Kaplan-Meier plot. #> • km_summary: A summary table of the Kaplan-Meier estimates. #>  #> ── km Summary ── #>  #>         group records events    rmean se(rmean)   median  0.95LCL  0.95UCL #> Good     Good     229     51 5.934330 0.1616003       NA       NA       NA #> Medium Medium     229    103 4.600852 0.1856699 5.254795 4.115068 5.572603 #> Poor     Poor     228    145 3.101736 0.1772520 2.183562 1.978082 2.619178 #>        Median follow-up #> Good           4.452055 #> Medium         4.712329 #> Poor           4.115068 #>  #> \"km_plot\" has been printed. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `get_km()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/print.inspect_surv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for inspect_surv_data() — print.inspect_surv_data","title":"Print methods for inspect_surv_data() — print.inspect_surv_data","text":"Print methods inspect_surv_data()","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.inspect_surv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for inspect_surv_data() — print.inspect_surv_data","text":"","code":"# S3 method for inspect_surv_data print(x, ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/print.inspect_surv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for inspect_surv_data() — print.inspect_surv_data","text":"x object class inspect_surv_data ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.inspect_surv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for inspect_surv_data() — print.inspect_surv_data","text":"print summary inspect_surv_data object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.predict_and_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for predict_and_plot() — print.predict_and_plot","title":"Print methods for predict_and_plot() — print.predict_and_plot","text":"Print methods predict_and_plot()","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.predict_and_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for predict_and_plot() — print.predict_and_plot","text":"","code":"# S3 method for predict_and_plot print(x, ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/print.predict_and_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for predict_and_plot() — print.predict_and_plot","text":"x object class predict_and_plot ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.predict_and_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for predict_and_plot() — print.predict_and_plot","text":"print summary predict_and_plot object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.predict_and_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for predict_and_plot() — print.predict_and_plot","text":"","code":"models <- fit_models(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   predict_by = \"group\" )  predict_and_plot(models) #> ℹ Survival plots have been printed. #> ℹ Hazard plots have been printed."},{"path":"https://maple-health-group.github.io/easysurv/reference/print.test_ph.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for test_ph() — print.test_ph","title":"Print methods for test_ph() — print.test_ph","text":"Print methods test_ph()","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.test_ph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for test_ph() — print.test_ph","text":"","code":"# S3 method for test_ph print(x, ...)"},{"path":"https://maple-health-group.github.io/easysurv/reference/print.test_ph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for test_ph() — print.test_ph","text":"x object class test_ph ... Additional arguments","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.test_ph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for test_ph() — print.test_ph","text":"print summary test_ph object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/print.test_ph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for test_ph() — print.test_ph","text":"","code":"ph_results <- test_ph(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\" )  ph_results #>  #> ── Testing Survival Curve Differences ────────────────────────────────────────── #> ℹ `survival::survdiff()` found a p-value of 0. #> ✔ suggests survival differences between groups are statistically significant. #>  #> ── Testing Proportional Hazards Assumption ───────────────────────────────────── #>  #> ── Cox Proportional Hazards Model ── #>  #> `survival::coxph()` output: #>  #>                  coef exp(coef)  se(coef)        z     Pr(>|z|) #> groupMedium 0.8401002  2.316599 0.1713926 4.901613 9.505295e-07 #> groupPoor   1.6180720  5.043358 0.1645443 9.833656 8.063728e-23 #>  #> The exp(coef) column shows the hazard ratios were 2.317 and 5.043. #>  #> ℹ `survival::cox.zph()` found a p-value of 0.017. #> ! suggests the PH assumption may not be valid. #>  #> ── Plots ── #>  #> ℹ Schoenfeld residuals and log cumulative hazard plots have been printed. #> ℹ PH tests may not always agree, so consider the results of all tests and plots in totality. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `test_ph()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","title":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","text":"function launches example script starting survival analysis using easysurv package. script uses modified version lung data set exported survival package. code inspired usethis::use_template() modified work outside context .RProj package.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","text":"","code":"quick_start(output_file_name = NULL)"},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","text":"output_file_name Optional. file name use script. Defaults \"easysurv_start.R\" within helper function.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","text":"new R script file example code.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Example Survival Analysis Script using the easy_lung Data Set — quick_start","text":"","code":"quick_start() #> ℹ easysurv template: Attempting to write a new .R file to a temporary directory. #> ✔ Writing '/tmp/RtmpiKotc2/easysurv_start.R' #> • Edit '/tmp/RtmpiKotc2/easysurv_start.R' #> ℹ Remember to save the file to a permanent location if you wish to keep it."},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start2.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","title":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","text":"function launches example script starting survival analysis using easysurv package. script uses modified version bc data set exported flexsurv package. code inspired usethis::use_template() modified work outside context .RProj package.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","text":"","code":"quick_start2(output_file_name = NULL)"},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","text":"output_file_name Optional. file name use script. Defaults \"easysurv_start.R\" within helper function.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","text":"new R script file example code.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Example Survival Analysis Script using the easy_bc Data Set — quick_start2","text":"","code":"quick_start2() #> ℹ easysurv template: Attempting to write a new .R file to a temporary directory. #> ✔ Leaving '/tmp/RtmpiKotc2/easysurv_start.R' unchanged #> • Edit '/tmp/RtmpiKotc2/easysurv_start.R' #> ℹ Remember to save the file to a permanent location if you wish to keep it."},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start3.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","title":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","text":"function launches example script starting survival analysis using easysurv package. script uses simulated phase III breast cancer trial data available ggsurvfit package. code inspired usethis::use_template() modified work outside context .RProj package.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","text":"","code":"quick_start3(output_file_name = NULL)"},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","text":"output_file_name Optional. file name use script. Defaults \"easysurv_start.R\"  within helper function.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","text":"new R script file example code.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/quick_start3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch Example Survival Analysis Script using the easy_adtte Data Set — quick_start3","text":"","code":"quick_start3() #> ℹ easysurv template: Attempting to write a new .R file to a temporary directory. #> ✔ Leaving '/tmp/RtmpiKotc2/easysurv_start.R' unchanged #> • Edit '/tmp/RtmpiKotc2/easysurv_start.R' #> ℹ Remember to save the file to a permanent location if you wish to keep it."},{"path":"https://maple-health-group.github.io/easysurv/reference/test_PH.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Proportional Hazards Assumption — test_ph","title":"Test Proportional Hazards Assumption — test_ph","text":"Assesses proportional hazards assumption survival data using Cox proportional hazards model related tests.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/test_PH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Proportional Hazards Assumption — test_ph","text":"","code":"test_ph(data, time, event, group, plot_theme = theme_easysurv())"},{"path":"https://maple-health-group.github.io/easysurv/reference/test_PH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Proportional Hazards Assumption — test_ph","text":"data data frame containing survival data. time name column data containing time--event information. event name column data indicating whether event interest occurred. group name column data defining grouping variable. plot_theme theme used plots.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/test_PH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Proportional Hazards Assumption — test_ph","text":"list containing plots test results related assessment proportional hazards assumption. cloglog_plot plot log cumulative hazard function. lines roughly parallel, suggests proportional hazards assumption holds.\" coxph_model coefficients Cox proportional hazards model. exp(coef) column shows hazard ratio. survdiff results log-rank test differences survival curves groups. p-value less 0.05 suggests survival differences groups statistically significant. coxph_test results proportional hazards assumption test. p-value less 0.05 suggests proportional hazards assumption may violated. schoenfeld_plot plot Schoenfeld residuals. flat smoothed line close zero supports proportional hazards assumption. non-flat smoothed line trend suggests proportional hazards assumption violated.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/test_PH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Proportional Hazards Assumption — test_ph","text":"","code":"ph_results <- test_ph(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\" )  ph_results #>  #> ── Testing Survival Curve Differences ────────────────────────────────────────── #> ℹ `survival::survdiff()` found a p-value of 0. #> ✔ suggests survival differences between groups are statistically significant. #>  #> ── Testing Proportional Hazards Assumption ───────────────────────────────────── #>  #> ── Cox Proportional Hazards Model ── #>  #> `survival::coxph()` output: #>  #>                  coef exp(coef)  se(coef)        z     Pr(>|z|) #> groupMedium 0.8401002  2.316599 0.1713926 4.901613 9.505295e-07 #> groupPoor   1.6180720  5.043358 0.1645443 9.833656 8.063728e-23 #>  #> The exp(coef) column shows the hazard ratios were 2.317 and 5.043. #>  #> ℹ `survival::cox.zph()` found a p-value of 0.017. #> ! suggests the PH assumption may not be valid. #>  #> ── Plots ── #>  #> ℹ Schoenfeld residuals and log cumulative hazard plots have been printed. #> ℹ PH tests may not always agree, so consider the results of all tests and plots in totality. #> ──────────────────────────────────────────────────────────────────────────────── #> → For more information, run `View()` on saved `test_ph()` output."},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_easysurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Theme for easysurv Survival and Hazard Plots — theme_easysurv","title":"Plot Theme for easysurv Survival and Hazard Plots — theme_easysurv","text":"Plot Theme easysurv Survival Hazard Plots","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_easysurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Theme for easysurv Survival and Hazard Plots — theme_easysurv","text":"","code":"theme_easysurv()"},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_easysurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Theme for easysurv Survival and Hazard Plots — theme_easysurv","text":"ggplot2 theme object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_easysurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Theme for easysurv Survival and Hazard Plots — theme_easysurv","text":"","code":"library(ggsurvfit) fit <- survfit2(Surv(time, status) ~ surg, data = df_colon) fit |> ggsurvfit() + theme_easysurv()"},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_risktable_easysurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Theme for easysurv Risk Tables — theme_risktable_easysurv","title":"Plot Theme for easysurv Risk Tables — theme_risktable_easysurv","text":"used ggsurvfit::add_risktable().","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_risktable_easysurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Theme for easysurv Risk Tables — theme_risktable_easysurv","text":"","code":"theme_risktable_easysurv()"},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_risktable_easysurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Theme for easysurv Risk Tables — theme_risktable_easysurv","text":"list containing ggplot2 theme object.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/theme_risktable_easysurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Theme for easysurv Risk Tables — theme_risktable_easysurv","text":"","code":"library(ggsurvfit) fit <- survfit2(Surv(time, status) ~ surg, data = df_colon) fit <- fit |> ggsurvfit() +   theme_easysurv() +   add_risktable(theme = theme_risktable_easysurv()) fit"},{"path":"https://maple-health-group.github.io/easysurv/reference/write_to_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Export easysurv output to Excel via openxlsx — write_to_xl","title":"Export easysurv output to Excel via openxlsx — write_to_xl","text":"Export easysurv output Excel via openxlsx","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/write_to_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export easysurv output to Excel via openxlsx — write_to_xl","text":"","code":"write_to_xl(wb, object)"},{"path":"https://maple-health-group.github.io/easysurv/reference/write_to_xl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export easysurv output to Excel via openxlsx — write_to_xl","text":"wb Workbook object containing worksheet object output easysurv command","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/write_to_xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export easysurv output to Excel via openxlsx — write_to_xl","text":"Excel workbook easysurv output.","code":""},{"path":"https://maple-health-group.github.io/easysurv/reference/write_to_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export easysurv output to Excel via openxlsx — write_to_xl","text":"","code":"km_results <- get_km(   data = easysurv::easy_bc,   time = \"recyrs\",   event = \"censrec\",   group = \"group\",   risktable_symbols = FALSE )  wb <- openxlsx::createWorkbook()  if (FALSE) { write_to_xl(wb, km_results) openxlsx::saveWorkbook(wb, \"km_results.xlsx\", overwrite = TRUE) openxlsx::openXL(\"km_results.xlsx\") }"},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/news/index.html","id":"easysurv-201","dir":"Changelog","previous_headings":"","what":"easysurv 2.0.1","title":"easysurv 2.0.1","text":"Removed wrapping examples (FALSE){}. write_to_xl.Rd, now use \\dontrun{} prevent Excel file created, saved launched. Updated Description field DESCRIPTION, correcting erroneous reference ‘flexsurvspline’ package; function. error addressed README file fit_models() documentation. Removed dependency fs package. fs::path_package() replaced system.file(). Wrapped external functions square brackets roxygen2 documentation support auto-linking external documentation.","code":""},{"path":[]},{"path":"https://maple-health-group.github.io/easysurv/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"easysurv 2.0.0","text":"tidymodels framework collection R packages modeling machine learning using tidyverse principles. tidymodels framework, take advantage parsnip censored packages specify models predict survival outputs. parsnip package provides interface many different modeling packages, allowing consistent syntax fitting models making predictions. censored package parsnip extension provides engines various models handle censored data survival analysis. inspect_surv_data() allows quick inspection survival data. get_km() replaces quick_KM() function fit Kaplan-Meier curves. test_ph() replaces quick_PH() function test proportional hazards assumption. fit_models() allows additional covariates specified model fitting. predict_and_plot() separates generation predictions associated plots main model fitting function.","code":""},{"path":"https://maple-health-group.github.io/easysurv/news/index.html","id":"other-improvements-and-bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Other improvements and bug fixes","title":"easysurv 2.0.0","text":"longer requires additional font installation. Introduced print methods cli package key functions simplify summarise outputs. Changed primary plotting package ggsurvplot ggsurvfit. ggsurvplot generates warning messages median survival lines added generates misaligned risk tables ggplot2 version 3.5.0, ggsurvfit actively maintained. facilitate interpretation Schoenfeld residual plots, scaled Schoenfeld residuals now used, facets longer produced per strata. plot() run output fit_models() acts call predict_and_plot(), generating predictions plots specified model.","code":""},{"path":"https://maple-health-group.github.io/easysurv/news/index.html","id":"easysurv-110","dir":"Changelog","previous_headings":"","what":"easysurv 1.1.0","title":"easysurv 1.1.0","text":"plot_fits() now uses flexsurv generate survival predictions plots, matches prediction method predict_fits(). original prediction method (via survHE) can used instead setting new argument plot_predictions = \"survHE\" plot_fits() functions use plot_fits() (e.g., quick_fit_select(), quick_fit()). predict_fits() now outputs list object includes 95% confidence intervals predicted survival probabilities. CIs can excluded setting include_ci = FALSE. include_ci argument available functions use predict_fits() objects generated predict_fits() (e.g., quick_fit_select(), quick_fit()). dependency cli package added support aesthetic informative warning messages, quick_to_XL() function.","code":""},{"path":"https://maple-health-group.github.io/easysurv/news/index.html","id":"easysurv-100","dir":"Changelog","previous_headings":"","what":"easysurv 1.0.0","title":"easysurv 1.0.0","text":"Initial GitHub release.","code":""}]
